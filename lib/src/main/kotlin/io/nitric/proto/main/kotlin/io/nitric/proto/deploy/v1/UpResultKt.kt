//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: proto/deploy/v1/deploy.proto

package io.nitric.proto.deploy.v1;

@kotlin.jvm.JvmName("-initializeupResult")
inline fun upResult(block: io.nitric.proto.deploy.v1.UpResultKt.Dsl.() -> kotlin.Unit): io.nitric.proto.deploy.v1.UpResult =
  io.nitric.proto.deploy.v1.UpResultKt.Dsl._create(io.nitric.proto.deploy.v1.UpResult.newBuilder()).apply { block() }._build()
object UpResultKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: io.nitric.proto.deploy.v1.UpResult.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.nitric.proto.deploy.v1.UpResult.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.nitric.proto.deploy.v1.UpResult = _builder.build()

    /**
     * <pre>
     * Simple formatted string output as result
     * </pre>
     *
     * <code>string string_result = 1;</code>
     */
    var stringResult: kotlin.String
      @JvmName("getStringResult")
      get() = _builder.getStringResult()
      @JvmName("setStringResult")
      set(value) {
        _builder.setStringResult(value)
      }
    /**
     * <pre>
     * Simple formatted string output as result
     * </pre>
     *
     * <code>string string_result = 1;</code>
     */
    fun clearStringResult() {
      _builder.clearStringResult()
    }
    /**
     * <pre>
     * Simple formatted string output as result
     * </pre>
     *
     * <code>string string_result = 1;</code>
     * @return Whether the stringResult field is set.
     */
    fun hasStringResult(): kotlin.Boolean {
      return _builder.hasStringResult()
    }
    val contentCase: io.nitric.proto.deploy.v1.UpResult.ContentCase
      @JvmName("getContentCase")
      get() = _builder.getContentCase()

    fun clearContent() {
      _builder.clearContent()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun io.nitric.proto.deploy.v1.UpResult.copy(block: io.nitric.proto.deploy.v1.UpResultKt.Dsl.() -> kotlin.Unit): io.nitric.proto.deploy.v1.UpResult =
  io.nitric.proto.deploy.v1.UpResultKt.Dsl._create(this.toBuilder()).apply { block() }._build()

