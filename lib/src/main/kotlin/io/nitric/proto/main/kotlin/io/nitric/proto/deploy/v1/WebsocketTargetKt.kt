//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: proto/deploy/v1/deploy.proto

package io.nitric.proto.deploy.v1;

@kotlin.jvm.JvmName("-initializewebsocketTarget")
inline fun websocketTarget(block: io.nitric.proto.deploy.v1.WebsocketTargetKt.Dsl.() -> kotlin.Unit): io.nitric.proto.deploy.v1.WebsocketTarget =
  io.nitric.proto.deploy.v1.WebsocketTargetKt.Dsl._create(io.nitric.proto.deploy.v1.WebsocketTarget.newBuilder()).apply { block() }._build()
object WebsocketTargetKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: io.nitric.proto.deploy.v1.WebsocketTarget.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.nitric.proto.deploy.v1.WebsocketTarget.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.nitric.proto.deploy.v1.WebsocketTarget = _builder.build()

    /**
     * <pre>
     * The name of an execution unit to target
     * </pre>
     *
     * <code>string execution_unit = 1;</code>
     */
    var executionUnit: kotlin.String
      @JvmName("getExecutionUnit")
      get() = _builder.getExecutionUnit()
      @JvmName("setExecutionUnit")
      set(value) {
        _builder.setExecutionUnit(value)
      }
    /**
     * <pre>
     * The name of an execution unit to target
     * </pre>
     *
     * <code>string execution_unit = 1;</code>
     */
    fun clearExecutionUnit() {
      _builder.clearExecutionUnit()
    }
    /**
     * <pre>
     * The name of an execution unit to target
     * </pre>
     *
     * <code>string execution_unit = 1;</code>
     * @return Whether the executionUnit field is set.
     */
    fun hasExecutionUnit(): kotlin.Boolean {
      return _builder.hasExecutionUnit()
    }
    val targetCase: io.nitric.proto.deploy.v1.WebsocketTarget.TargetCase
      @JvmName("getTargetCase")
      get() = _builder.getTargetCase()

    fun clearTarget() {
      _builder.clearTarget()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun io.nitric.proto.deploy.v1.WebsocketTarget.copy(block: io.nitric.proto.deploy.v1.WebsocketTargetKt.Dsl.() -> kotlin.Unit): io.nitric.proto.deploy.v1.WebsocketTarget =
  io.nitric.proto.deploy.v1.WebsocketTargetKt.Dsl._create(this.toBuilder()).apply { block() }._build()

