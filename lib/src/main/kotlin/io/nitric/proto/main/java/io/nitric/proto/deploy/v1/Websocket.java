// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/deploy/v1/deploy.proto

package io.nitric.proto.deploy.v1;

/**
 * <pre>
 * Declare a new websocket
 * </pre>
 *
 * Protobuf type {@code nitric.deploy.v1.Websocket}
 */
public final class Websocket extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:nitric.deploy.v1.Websocket)
    WebsocketOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Websocket.newBuilder() to construct.
  private Websocket(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Websocket() {
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Websocket();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return io.nitric.proto.deploy.v1.Deploys.internal_static_nitric_deploy_v1_Websocket_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return io.nitric.proto.deploy.v1.Deploys.internal_static_nitric_deploy_v1_Websocket_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            io.nitric.proto.deploy.v1.Websocket.class, io.nitric.proto.deploy.v1.Websocket.Builder.class);
  }

  public static final int CONNECT_TARGET_FIELD_NUMBER = 1;
  private io.nitric.proto.deploy.v1.WebsocketTarget connectTarget_;
  /**
   * <pre>
   * Target for handling new client connections
   * </pre>
   *
   * <code>.nitric.deploy.v1.WebsocketTarget connect_target = 1;</code>
   * @return Whether the connectTarget field is set.
   */
  @java.lang.Override
  public boolean hasConnectTarget() {
    return connectTarget_ != null;
  }
  /**
   * <pre>
   * Target for handling new client connections
   * </pre>
   *
   * <code>.nitric.deploy.v1.WebsocketTarget connect_target = 1;</code>
   * @return The connectTarget.
   */
  @java.lang.Override
  public io.nitric.proto.deploy.v1.WebsocketTarget getConnectTarget() {
    return connectTarget_ == null ? io.nitric.proto.deploy.v1.WebsocketTarget.getDefaultInstance() : connectTarget_;
  }
  /**
   * <pre>
   * Target for handling new client connections
   * </pre>
   *
   * <code>.nitric.deploy.v1.WebsocketTarget connect_target = 1;</code>
   */
  @java.lang.Override
  public io.nitric.proto.deploy.v1.WebsocketTargetOrBuilder getConnectTargetOrBuilder() {
    return getConnectTarget();
  }

  public static final int DISCONNECT_TARGET_FIELD_NUMBER = 2;
  private io.nitric.proto.deploy.v1.WebsocketTarget disconnectTarget_;
  /**
   * <pre>
   * Target for handling client disconnections
   * </pre>
   *
   * <code>.nitric.deploy.v1.WebsocketTarget disconnect_target = 2;</code>
   * @return Whether the disconnectTarget field is set.
   */
  @java.lang.Override
  public boolean hasDisconnectTarget() {
    return disconnectTarget_ != null;
  }
  /**
   * <pre>
   * Target for handling client disconnections
   * </pre>
   *
   * <code>.nitric.deploy.v1.WebsocketTarget disconnect_target = 2;</code>
   * @return The disconnectTarget.
   */
  @java.lang.Override
  public io.nitric.proto.deploy.v1.WebsocketTarget getDisconnectTarget() {
    return disconnectTarget_ == null ? io.nitric.proto.deploy.v1.WebsocketTarget.getDefaultInstance() : disconnectTarget_;
  }
  /**
   * <pre>
   * Target for handling client disconnections
   * </pre>
   *
   * <code>.nitric.deploy.v1.WebsocketTarget disconnect_target = 2;</code>
   */
  @java.lang.Override
  public io.nitric.proto.deploy.v1.WebsocketTargetOrBuilder getDisconnectTargetOrBuilder() {
    return getDisconnectTarget();
  }

  public static final int MESSAGE_TARGET_FIELD_NUMBER = 3;
  private io.nitric.proto.deploy.v1.WebsocketTarget messageTarget_;
  /**
   * <pre>
   * Target for handling all other message types
   * </pre>
   *
   * <code>.nitric.deploy.v1.WebsocketTarget message_target = 3;</code>
   * @return Whether the messageTarget field is set.
   */
  @java.lang.Override
  public boolean hasMessageTarget() {
    return messageTarget_ != null;
  }
  /**
   * <pre>
   * Target for handling all other message types
   * </pre>
   *
   * <code>.nitric.deploy.v1.WebsocketTarget message_target = 3;</code>
   * @return The messageTarget.
   */
  @java.lang.Override
  public io.nitric.proto.deploy.v1.WebsocketTarget getMessageTarget() {
    return messageTarget_ == null ? io.nitric.proto.deploy.v1.WebsocketTarget.getDefaultInstance() : messageTarget_;
  }
  /**
   * <pre>
   * Target for handling all other message types
   * </pre>
   *
   * <code>.nitric.deploy.v1.WebsocketTarget message_target = 3;</code>
   */
  @java.lang.Override
  public io.nitric.proto.deploy.v1.WebsocketTargetOrBuilder getMessageTargetOrBuilder() {
    return getMessageTarget();
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (connectTarget_ != null) {
      output.writeMessage(1, getConnectTarget());
    }
    if (disconnectTarget_ != null) {
      output.writeMessage(2, getDisconnectTarget());
    }
    if (messageTarget_ != null) {
      output.writeMessage(3, getMessageTarget());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (connectTarget_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getConnectTarget());
    }
    if (disconnectTarget_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getDisconnectTarget());
    }
    if (messageTarget_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getMessageTarget());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof io.nitric.proto.deploy.v1.Websocket)) {
      return super.equals(obj);
    }
    io.nitric.proto.deploy.v1.Websocket other = (io.nitric.proto.deploy.v1.Websocket) obj;

    if (hasConnectTarget() != other.hasConnectTarget()) return false;
    if (hasConnectTarget()) {
      if (!getConnectTarget()
          .equals(other.getConnectTarget())) return false;
    }
    if (hasDisconnectTarget() != other.hasDisconnectTarget()) return false;
    if (hasDisconnectTarget()) {
      if (!getDisconnectTarget()
          .equals(other.getDisconnectTarget())) return false;
    }
    if (hasMessageTarget() != other.hasMessageTarget()) return false;
    if (hasMessageTarget()) {
      if (!getMessageTarget()
          .equals(other.getMessageTarget())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasConnectTarget()) {
      hash = (37 * hash) + CONNECT_TARGET_FIELD_NUMBER;
      hash = (53 * hash) + getConnectTarget().hashCode();
    }
    if (hasDisconnectTarget()) {
      hash = (37 * hash) + DISCONNECT_TARGET_FIELD_NUMBER;
      hash = (53 * hash) + getDisconnectTarget().hashCode();
    }
    if (hasMessageTarget()) {
      hash = (37 * hash) + MESSAGE_TARGET_FIELD_NUMBER;
      hash = (53 * hash) + getMessageTarget().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static io.nitric.proto.deploy.v1.Websocket parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.nitric.proto.deploy.v1.Websocket parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.nitric.proto.deploy.v1.Websocket parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.nitric.proto.deploy.v1.Websocket parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.nitric.proto.deploy.v1.Websocket parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static io.nitric.proto.deploy.v1.Websocket parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static io.nitric.proto.deploy.v1.Websocket parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.nitric.proto.deploy.v1.Websocket parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.nitric.proto.deploy.v1.Websocket parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static io.nitric.proto.deploy.v1.Websocket parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static io.nitric.proto.deploy.v1.Websocket parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static io.nitric.proto.deploy.v1.Websocket parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(io.nitric.proto.deploy.v1.Websocket prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Declare a new websocket
   * </pre>
   *
   * Protobuf type {@code nitric.deploy.v1.Websocket}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:nitric.deploy.v1.Websocket)
      io.nitric.proto.deploy.v1.WebsocketOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return io.nitric.proto.deploy.v1.Deploys.internal_static_nitric_deploy_v1_Websocket_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return io.nitric.proto.deploy.v1.Deploys.internal_static_nitric_deploy_v1_Websocket_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              io.nitric.proto.deploy.v1.Websocket.class, io.nitric.proto.deploy.v1.Websocket.Builder.class);
    }

    // Construct using io.nitric.proto.deploy.v1.Websocket.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (connectTargetBuilder_ == null) {
        connectTarget_ = null;
      } else {
        connectTarget_ = null;
        connectTargetBuilder_ = null;
      }
      if (disconnectTargetBuilder_ == null) {
        disconnectTarget_ = null;
      } else {
        disconnectTarget_ = null;
        disconnectTargetBuilder_ = null;
      }
      if (messageTargetBuilder_ == null) {
        messageTarget_ = null;
      } else {
        messageTarget_ = null;
        messageTargetBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return io.nitric.proto.deploy.v1.Deploys.internal_static_nitric_deploy_v1_Websocket_descriptor;
    }

    @java.lang.Override
    public io.nitric.proto.deploy.v1.Websocket getDefaultInstanceForType() {
      return io.nitric.proto.deploy.v1.Websocket.getDefaultInstance();
    }

    @java.lang.Override
    public io.nitric.proto.deploy.v1.Websocket build() {
      io.nitric.proto.deploy.v1.Websocket result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public io.nitric.proto.deploy.v1.Websocket buildPartial() {
      io.nitric.proto.deploy.v1.Websocket result = new io.nitric.proto.deploy.v1.Websocket(this);
      if (connectTargetBuilder_ == null) {
        result.connectTarget_ = connectTarget_;
      } else {
        result.connectTarget_ = connectTargetBuilder_.build();
      }
      if (disconnectTargetBuilder_ == null) {
        result.disconnectTarget_ = disconnectTarget_;
      } else {
        result.disconnectTarget_ = disconnectTargetBuilder_.build();
      }
      if (messageTargetBuilder_ == null) {
        result.messageTarget_ = messageTarget_;
      } else {
        result.messageTarget_ = messageTargetBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof io.nitric.proto.deploy.v1.Websocket) {
        return mergeFrom((io.nitric.proto.deploy.v1.Websocket)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(io.nitric.proto.deploy.v1.Websocket other) {
      if (other == io.nitric.proto.deploy.v1.Websocket.getDefaultInstance()) return this;
      if (other.hasConnectTarget()) {
        mergeConnectTarget(other.getConnectTarget());
      }
      if (other.hasDisconnectTarget()) {
        mergeDisconnectTarget(other.getDisconnectTarget());
      }
      if (other.hasMessageTarget()) {
        mergeMessageTarget(other.getMessageTarget());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getConnectTargetFieldBuilder().getBuilder(),
                  extensionRegistry);

              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getDisconnectTargetFieldBuilder().getBuilder(),
                  extensionRegistry);

              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getMessageTargetFieldBuilder().getBuilder(),
                  extensionRegistry);

              break;
            } // case 26
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }

    private io.nitric.proto.deploy.v1.WebsocketTarget connectTarget_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.nitric.proto.deploy.v1.WebsocketTarget, io.nitric.proto.deploy.v1.WebsocketTarget.Builder, io.nitric.proto.deploy.v1.WebsocketTargetOrBuilder> connectTargetBuilder_;
    /**
     * <pre>
     * Target for handling new client connections
     * </pre>
     *
     * <code>.nitric.deploy.v1.WebsocketTarget connect_target = 1;</code>
     * @return Whether the connectTarget field is set.
     */
    public boolean hasConnectTarget() {
      return connectTargetBuilder_ != null || connectTarget_ != null;
    }
    /**
     * <pre>
     * Target for handling new client connections
     * </pre>
     *
     * <code>.nitric.deploy.v1.WebsocketTarget connect_target = 1;</code>
     * @return The connectTarget.
     */
    public io.nitric.proto.deploy.v1.WebsocketTarget getConnectTarget() {
      if (connectTargetBuilder_ == null) {
        return connectTarget_ == null ? io.nitric.proto.deploy.v1.WebsocketTarget.getDefaultInstance() : connectTarget_;
      } else {
        return connectTargetBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Target for handling new client connections
     * </pre>
     *
     * <code>.nitric.deploy.v1.WebsocketTarget connect_target = 1;</code>
     */
    public Builder setConnectTarget(io.nitric.proto.deploy.v1.WebsocketTarget value) {
      if (connectTargetBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        connectTarget_ = value;
        onChanged();
      } else {
        connectTargetBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Target for handling new client connections
     * </pre>
     *
     * <code>.nitric.deploy.v1.WebsocketTarget connect_target = 1;</code>
     */
    public Builder setConnectTarget(
        io.nitric.proto.deploy.v1.WebsocketTarget.Builder builderForValue) {
      if (connectTargetBuilder_ == null) {
        connectTarget_ = builderForValue.build();
        onChanged();
      } else {
        connectTargetBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Target for handling new client connections
     * </pre>
     *
     * <code>.nitric.deploy.v1.WebsocketTarget connect_target = 1;</code>
     */
    public Builder mergeConnectTarget(io.nitric.proto.deploy.v1.WebsocketTarget value) {
      if (connectTargetBuilder_ == null) {
        if (connectTarget_ != null) {
          connectTarget_ =
            io.nitric.proto.deploy.v1.WebsocketTarget.newBuilder(connectTarget_).mergeFrom(value).buildPartial();
        } else {
          connectTarget_ = value;
        }
        onChanged();
      } else {
        connectTargetBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Target for handling new client connections
     * </pre>
     *
     * <code>.nitric.deploy.v1.WebsocketTarget connect_target = 1;</code>
     */
    public Builder clearConnectTarget() {
      if (connectTargetBuilder_ == null) {
        connectTarget_ = null;
        onChanged();
      } else {
        connectTarget_ = null;
        connectTargetBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Target for handling new client connections
     * </pre>
     *
     * <code>.nitric.deploy.v1.WebsocketTarget connect_target = 1;</code>
     */
    public io.nitric.proto.deploy.v1.WebsocketTarget.Builder getConnectTargetBuilder() {
      
      onChanged();
      return getConnectTargetFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Target for handling new client connections
     * </pre>
     *
     * <code>.nitric.deploy.v1.WebsocketTarget connect_target = 1;</code>
     */
    public io.nitric.proto.deploy.v1.WebsocketTargetOrBuilder getConnectTargetOrBuilder() {
      if (connectTargetBuilder_ != null) {
        return connectTargetBuilder_.getMessageOrBuilder();
      } else {
        return connectTarget_ == null ?
            io.nitric.proto.deploy.v1.WebsocketTarget.getDefaultInstance() : connectTarget_;
      }
    }
    /**
     * <pre>
     * Target for handling new client connections
     * </pre>
     *
     * <code>.nitric.deploy.v1.WebsocketTarget connect_target = 1;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.nitric.proto.deploy.v1.WebsocketTarget, io.nitric.proto.deploy.v1.WebsocketTarget.Builder, io.nitric.proto.deploy.v1.WebsocketTargetOrBuilder> 
        getConnectTargetFieldBuilder() {
      if (connectTargetBuilder_ == null) {
        connectTargetBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.nitric.proto.deploy.v1.WebsocketTarget, io.nitric.proto.deploy.v1.WebsocketTarget.Builder, io.nitric.proto.deploy.v1.WebsocketTargetOrBuilder>(
                getConnectTarget(),
                getParentForChildren(),
                isClean());
        connectTarget_ = null;
      }
      return connectTargetBuilder_;
    }

    private io.nitric.proto.deploy.v1.WebsocketTarget disconnectTarget_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.nitric.proto.deploy.v1.WebsocketTarget, io.nitric.proto.deploy.v1.WebsocketTarget.Builder, io.nitric.proto.deploy.v1.WebsocketTargetOrBuilder> disconnectTargetBuilder_;
    /**
     * <pre>
     * Target for handling client disconnections
     * </pre>
     *
     * <code>.nitric.deploy.v1.WebsocketTarget disconnect_target = 2;</code>
     * @return Whether the disconnectTarget field is set.
     */
    public boolean hasDisconnectTarget() {
      return disconnectTargetBuilder_ != null || disconnectTarget_ != null;
    }
    /**
     * <pre>
     * Target for handling client disconnections
     * </pre>
     *
     * <code>.nitric.deploy.v1.WebsocketTarget disconnect_target = 2;</code>
     * @return The disconnectTarget.
     */
    public io.nitric.proto.deploy.v1.WebsocketTarget getDisconnectTarget() {
      if (disconnectTargetBuilder_ == null) {
        return disconnectTarget_ == null ? io.nitric.proto.deploy.v1.WebsocketTarget.getDefaultInstance() : disconnectTarget_;
      } else {
        return disconnectTargetBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Target for handling client disconnections
     * </pre>
     *
     * <code>.nitric.deploy.v1.WebsocketTarget disconnect_target = 2;</code>
     */
    public Builder setDisconnectTarget(io.nitric.proto.deploy.v1.WebsocketTarget value) {
      if (disconnectTargetBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        disconnectTarget_ = value;
        onChanged();
      } else {
        disconnectTargetBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Target for handling client disconnections
     * </pre>
     *
     * <code>.nitric.deploy.v1.WebsocketTarget disconnect_target = 2;</code>
     */
    public Builder setDisconnectTarget(
        io.nitric.proto.deploy.v1.WebsocketTarget.Builder builderForValue) {
      if (disconnectTargetBuilder_ == null) {
        disconnectTarget_ = builderForValue.build();
        onChanged();
      } else {
        disconnectTargetBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Target for handling client disconnections
     * </pre>
     *
     * <code>.nitric.deploy.v1.WebsocketTarget disconnect_target = 2;</code>
     */
    public Builder mergeDisconnectTarget(io.nitric.proto.deploy.v1.WebsocketTarget value) {
      if (disconnectTargetBuilder_ == null) {
        if (disconnectTarget_ != null) {
          disconnectTarget_ =
            io.nitric.proto.deploy.v1.WebsocketTarget.newBuilder(disconnectTarget_).mergeFrom(value).buildPartial();
        } else {
          disconnectTarget_ = value;
        }
        onChanged();
      } else {
        disconnectTargetBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Target for handling client disconnections
     * </pre>
     *
     * <code>.nitric.deploy.v1.WebsocketTarget disconnect_target = 2;</code>
     */
    public Builder clearDisconnectTarget() {
      if (disconnectTargetBuilder_ == null) {
        disconnectTarget_ = null;
        onChanged();
      } else {
        disconnectTarget_ = null;
        disconnectTargetBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Target for handling client disconnections
     * </pre>
     *
     * <code>.nitric.deploy.v1.WebsocketTarget disconnect_target = 2;</code>
     */
    public io.nitric.proto.deploy.v1.WebsocketTarget.Builder getDisconnectTargetBuilder() {
      
      onChanged();
      return getDisconnectTargetFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Target for handling client disconnections
     * </pre>
     *
     * <code>.nitric.deploy.v1.WebsocketTarget disconnect_target = 2;</code>
     */
    public io.nitric.proto.deploy.v1.WebsocketTargetOrBuilder getDisconnectTargetOrBuilder() {
      if (disconnectTargetBuilder_ != null) {
        return disconnectTargetBuilder_.getMessageOrBuilder();
      } else {
        return disconnectTarget_ == null ?
            io.nitric.proto.deploy.v1.WebsocketTarget.getDefaultInstance() : disconnectTarget_;
      }
    }
    /**
     * <pre>
     * Target for handling client disconnections
     * </pre>
     *
     * <code>.nitric.deploy.v1.WebsocketTarget disconnect_target = 2;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.nitric.proto.deploy.v1.WebsocketTarget, io.nitric.proto.deploy.v1.WebsocketTarget.Builder, io.nitric.proto.deploy.v1.WebsocketTargetOrBuilder> 
        getDisconnectTargetFieldBuilder() {
      if (disconnectTargetBuilder_ == null) {
        disconnectTargetBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.nitric.proto.deploy.v1.WebsocketTarget, io.nitric.proto.deploy.v1.WebsocketTarget.Builder, io.nitric.proto.deploy.v1.WebsocketTargetOrBuilder>(
                getDisconnectTarget(),
                getParentForChildren(),
                isClean());
        disconnectTarget_ = null;
      }
      return disconnectTargetBuilder_;
    }

    private io.nitric.proto.deploy.v1.WebsocketTarget messageTarget_;
    private com.google.protobuf.SingleFieldBuilderV3<
        io.nitric.proto.deploy.v1.WebsocketTarget, io.nitric.proto.deploy.v1.WebsocketTarget.Builder, io.nitric.proto.deploy.v1.WebsocketTargetOrBuilder> messageTargetBuilder_;
    /**
     * <pre>
     * Target for handling all other message types
     * </pre>
     *
     * <code>.nitric.deploy.v1.WebsocketTarget message_target = 3;</code>
     * @return Whether the messageTarget field is set.
     */
    public boolean hasMessageTarget() {
      return messageTargetBuilder_ != null || messageTarget_ != null;
    }
    /**
     * <pre>
     * Target for handling all other message types
     * </pre>
     *
     * <code>.nitric.deploy.v1.WebsocketTarget message_target = 3;</code>
     * @return The messageTarget.
     */
    public io.nitric.proto.deploy.v1.WebsocketTarget getMessageTarget() {
      if (messageTargetBuilder_ == null) {
        return messageTarget_ == null ? io.nitric.proto.deploy.v1.WebsocketTarget.getDefaultInstance() : messageTarget_;
      } else {
        return messageTargetBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Target for handling all other message types
     * </pre>
     *
     * <code>.nitric.deploy.v1.WebsocketTarget message_target = 3;</code>
     */
    public Builder setMessageTarget(io.nitric.proto.deploy.v1.WebsocketTarget value) {
      if (messageTargetBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        messageTarget_ = value;
        onChanged();
      } else {
        messageTargetBuilder_.setMessage(value);
      }

      return this;
    }
    /**
     * <pre>
     * Target for handling all other message types
     * </pre>
     *
     * <code>.nitric.deploy.v1.WebsocketTarget message_target = 3;</code>
     */
    public Builder setMessageTarget(
        io.nitric.proto.deploy.v1.WebsocketTarget.Builder builderForValue) {
      if (messageTargetBuilder_ == null) {
        messageTarget_ = builderForValue.build();
        onChanged();
      } else {
        messageTargetBuilder_.setMessage(builderForValue.build());
      }

      return this;
    }
    /**
     * <pre>
     * Target for handling all other message types
     * </pre>
     *
     * <code>.nitric.deploy.v1.WebsocketTarget message_target = 3;</code>
     */
    public Builder mergeMessageTarget(io.nitric.proto.deploy.v1.WebsocketTarget value) {
      if (messageTargetBuilder_ == null) {
        if (messageTarget_ != null) {
          messageTarget_ =
            io.nitric.proto.deploy.v1.WebsocketTarget.newBuilder(messageTarget_).mergeFrom(value).buildPartial();
        } else {
          messageTarget_ = value;
        }
        onChanged();
      } else {
        messageTargetBuilder_.mergeFrom(value);
      }

      return this;
    }
    /**
     * <pre>
     * Target for handling all other message types
     * </pre>
     *
     * <code>.nitric.deploy.v1.WebsocketTarget message_target = 3;</code>
     */
    public Builder clearMessageTarget() {
      if (messageTargetBuilder_ == null) {
        messageTarget_ = null;
        onChanged();
      } else {
        messageTarget_ = null;
        messageTargetBuilder_ = null;
      }

      return this;
    }
    /**
     * <pre>
     * Target for handling all other message types
     * </pre>
     *
     * <code>.nitric.deploy.v1.WebsocketTarget message_target = 3;</code>
     */
    public io.nitric.proto.deploy.v1.WebsocketTarget.Builder getMessageTargetBuilder() {
      
      onChanged();
      return getMessageTargetFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Target for handling all other message types
     * </pre>
     *
     * <code>.nitric.deploy.v1.WebsocketTarget message_target = 3;</code>
     */
    public io.nitric.proto.deploy.v1.WebsocketTargetOrBuilder getMessageTargetOrBuilder() {
      if (messageTargetBuilder_ != null) {
        return messageTargetBuilder_.getMessageOrBuilder();
      } else {
        return messageTarget_ == null ?
            io.nitric.proto.deploy.v1.WebsocketTarget.getDefaultInstance() : messageTarget_;
      }
    }
    /**
     * <pre>
     * Target for handling all other message types
     * </pre>
     *
     * <code>.nitric.deploy.v1.WebsocketTarget message_target = 3;</code>
     */
    private com.google.protobuf.SingleFieldBuilderV3<
        io.nitric.proto.deploy.v1.WebsocketTarget, io.nitric.proto.deploy.v1.WebsocketTarget.Builder, io.nitric.proto.deploy.v1.WebsocketTargetOrBuilder> 
        getMessageTargetFieldBuilder() {
      if (messageTargetBuilder_ == null) {
        messageTargetBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
            io.nitric.proto.deploy.v1.WebsocketTarget, io.nitric.proto.deploy.v1.WebsocketTarget.Builder, io.nitric.proto.deploy.v1.WebsocketTargetOrBuilder>(
                getMessageTarget(),
                getParentForChildren(),
                isClean());
        messageTarget_ = null;
      }
      return messageTargetBuilder_;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:nitric.deploy.v1.Websocket)
  }

  // @@protoc_insertion_point(class_scope:nitric.deploy.v1.Websocket)
  private static final io.nitric.proto.deploy.v1.Websocket DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new io.nitric.proto.deploy.v1.Websocket();
  }

  public static io.nitric.proto.deploy.v1.Websocket getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Websocket>
      PARSER = new com.google.protobuf.AbstractParser<Websocket>() {
    @java.lang.Override
    public Websocket parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<Websocket> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Websocket> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public io.nitric.proto.deploy.v1.Websocket getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

