//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: proto/faas/v1/faas.proto

package io.nitric.proto.faas.v1;

@kotlin.jvm.JvmName("-initializeclientMessage")
inline fun clientMessage(block: io.nitric.proto.faas.v1.ClientMessageKt.Dsl.() -> kotlin.Unit): io.nitric.proto.faas.v1.ClientMessage =
  io.nitric.proto.faas.v1.ClientMessageKt.Dsl._create(io.nitric.proto.faas.v1.ClientMessage.newBuilder()).apply { block() }._build()
object ClientMessageKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: io.nitric.proto.faas.v1.ClientMessage.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.nitric.proto.faas.v1.ClientMessage.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.nitric.proto.faas.v1.ClientMessage = _builder.build()

    /**
     * <pre>
     * Client message ID, used to pair requests/responses
     * </pre>
     *
     * <code>string id = 1;</code>
     */
    var id: kotlin.String
      @JvmName("getId")
      get() = _builder.getId()
      @JvmName("setId")
      set(value) {
        _builder.setId(value)
      }
    /**
     * <pre>
     * Client message ID, used to pair requests/responses
     * </pre>
     *
     * <code>string id = 1;</code>
     */
    fun clearId() {
      _builder.clearId()
    }

    /**
     * <pre>
     * Client initialisation request
     * A worker will not be eligible for triggers
     * until it has identified itself
     * </pre>
     *
     * <code>.nitric.faas.v1.InitRequest init_request = 2;</code>
     */
    var initRequest: io.nitric.proto.faas.v1.InitRequest
      @JvmName("getInitRequest")
      get() = _builder.getInitRequest()
      @JvmName("setInitRequest")
      set(value) {
        _builder.setInitRequest(value)
      }
    /**
     * <pre>
     * Client initialisation request
     * A worker will not be eligible for triggers
     * until it has identified itself
     * </pre>
     *
     * <code>.nitric.faas.v1.InitRequest init_request = 2;</code>
     */
    fun clearInitRequest() {
      _builder.clearInitRequest()
    }
    /**
     * <pre>
     * Client initialisation request
     * A worker will not be eligible for triggers
     * until it has identified itself
     * </pre>
     *
     * <code>.nitric.faas.v1.InitRequest init_request = 2;</code>
     * @return Whether the initRequest field is set.
     */
    fun hasInitRequest(): kotlin.Boolean {
      return _builder.hasInitRequest()
    }

    /**
     * <pre>
     * Client responsding with result of
     * a trigger
     * </pre>
     *
     * <code>.nitric.faas.v1.TriggerResponse trigger_response = 3;</code>
     */
    var triggerResponse: io.nitric.proto.faas.v1.TriggerResponse
      @JvmName("getTriggerResponse")
      get() = _builder.getTriggerResponse()
      @JvmName("setTriggerResponse")
      set(value) {
        _builder.setTriggerResponse(value)
      }
    /**
     * <pre>
     * Client responsding with result of
     * a trigger
     * </pre>
     *
     * <code>.nitric.faas.v1.TriggerResponse trigger_response = 3;</code>
     */
    fun clearTriggerResponse() {
      _builder.clearTriggerResponse()
    }
    /**
     * <pre>
     * Client responsding with result of
     * a trigger
     * </pre>
     *
     * <code>.nitric.faas.v1.TriggerResponse trigger_response = 3;</code>
     * @return Whether the triggerResponse field is set.
     */
    fun hasTriggerResponse(): kotlin.Boolean {
      return _builder.hasTriggerResponse()
    }
    val contentCase: io.nitric.proto.faas.v1.ClientMessage.ContentCase
      @JvmName("getContentCase")
      get() = _builder.getContentCase()

    fun clearContent() {
      _builder.clearContent()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun io.nitric.proto.faas.v1.ClientMessage.copy(block: io.nitric.proto.faas.v1.ClientMessageKt.Dsl.() -> kotlin.Unit): io.nitric.proto.faas.v1.ClientMessage =
  io.nitric.proto.faas.v1.ClientMessageKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val io.nitric.proto.faas.v1.ClientMessageOrBuilder.initRequestOrNull: io.nitric.proto.faas.v1.InitRequest?
  get() = if (hasInitRequest()) getInitRequest() else null

val io.nitric.proto.faas.v1.ClientMessageOrBuilder.triggerResponseOrNull: io.nitric.proto.faas.v1.TriggerResponse?
  get() = if (hasTriggerResponse()) getTriggerResponse() else null

