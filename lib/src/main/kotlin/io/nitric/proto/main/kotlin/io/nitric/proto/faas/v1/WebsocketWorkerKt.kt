//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: proto/faas/v1/faas.proto

package io.nitric.proto.faas.v1;

@kotlin.jvm.JvmName("-initializewebsocketWorker")
inline fun websocketWorker(block: io.nitric.proto.faas.v1.WebsocketWorkerKt.Dsl.() -> kotlin.Unit): io.nitric.proto.faas.v1.WebsocketWorker =
  io.nitric.proto.faas.v1.WebsocketWorkerKt.Dsl._create(io.nitric.proto.faas.v1.WebsocketWorker.newBuilder()).apply { block() }._build()
object WebsocketWorkerKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: io.nitric.proto.faas.v1.WebsocketWorker.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.nitric.proto.faas.v1.WebsocketWorker.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.nitric.proto.faas.v1.WebsocketWorker = _builder.build()

    /**
     * <pre>
     * The nitric name of the socket that this worker listens on
     * </pre>
     *
     * <code>string socket = 1;</code>
     */
    var socket: kotlin.String
      @JvmName("getSocket")
      get() = _builder.getSocket()
      @JvmName("setSocket")
      set(value) {
        _builder.setSocket(value)
      }
    /**
     * <pre>
     * The nitric name of the socket that this worker listens on
     * </pre>
     *
     * <code>string socket = 1;</code>
     */
    fun clearSocket() {
      _builder.clearSocket()
    }

    /**
     * <pre>
     * The type of event that this worker handles
     * </pre>
     *
     * <code>.nitric.faas.v1.WebsocketEvent event = 2;</code>
     */
     var event: io.nitric.proto.faas.v1.WebsocketEvent
      @JvmName("getEvent")
      get() = _builder.getEvent()
      @JvmName("setEvent")
      set(value) {
        _builder.setEvent(value)
      }
    /**
     * <pre>
     * The type of event that this worker handles
     * </pre>
     *
     * <code>.nitric.faas.v1.WebsocketEvent event = 2;</code>
     */
    fun clearEvent() {
      _builder.clearEvent()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun io.nitric.proto.faas.v1.WebsocketWorker.copy(block: io.nitric.proto.faas.v1.WebsocketWorkerKt.Dsl.() -> kotlin.Unit): io.nitric.proto.faas.v1.WebsocketWorker =
  io.nitric.proto.faas.v1.WebsocketWorkerKt.Dsl._create(this.toBuilder()).apply { block() }._build()

