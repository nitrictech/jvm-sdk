//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: proto/faas/v1/faas.proto

package io.nitric.proto.faas.v1;

@kotlin.jvm.JvmName("-initializenotificationTriggerContext")
inline fun notificationTriggerContext(block: io.nitric.proto.faas.v1.NotificationTriggerContextKt.Dsl.() -> kotlin.Unit): io.nitric.proto.faas.v1.NotificationTriggerContext =
  io.nitric.proto.faas.v1.NotificationTriggerContextKt.Dsl._create(io.nitric.proto.faas.v1.NotificationTriggerContext.newBuilder()).apply { block() }._build()
object NotificationTriggerContextKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: io.nitric.proto.faas.v1.NotificationTriggerContext.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.nitric.proto.faas.v1.NotificationTriggerContext.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.nitric.proto.faas.v1.NotificationTriggerContext = _builder.build()

    /**
     * <code>string source = 1;</code>
     */
    var source: kotlin.String
      @JvmName("getSource")
      get() = _builder.getSource()
      @JvmName("setSource")
      set(value) {
        _builder.setSource(value)
      }
    /**
     * <code>string source = 1;</code>
     */
    fun clearSource() {
      _builder.clearSource()
    }

    /**
     * <code>.nitric.faas.v1.BucketNotification bucket = 10;</code>
     */
    var bucket: io.nitric.proto.faas.v1.BucketNotification
      @JvmName("getBucket")
      get() = _builder.getBucket()
      @JvmName("setBucket")
      set(value) {
        _builder.setBucket(value)
      }
    /**
     * <code>.nitric.faas.v1.BucketNotification bucket = 10;</code>
     */
    fun clearBucket() {
      _builder.clearBucket()
    }
    /**
     * <code>.nitric.faas.v1.BucketNotification bucket = 10;</code>
     * @return Whether the bucket field is set.
     */
    fun hasBucket(): kotlin.Boolean {
      return _builder.hasBucket()
    }
    val notificationCase: io.nitric.proto.faas.v1.NotificationTriggerContext.NotificationCase
      @JvmName("getNotificationCase")
      get() = _builder.getNotificationCase()

    fun clearNotification() {
      _builder.clearNotification()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun io.nitric.proto.faas.v1.NotificationTriggerContext.copy(block: io.nitric.proto.faas.v1.NotificationTriggerContextKt.Dsl.() -> kotlin.Unit): io.nitric.proto.faas.v1.NotificationTriggerContext =
  io.nitric.proto.faas.v1.NotificationTriggerContextKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val io.nitric.proto.faas.v1.NotificationTriggerContextOrBuilder.bucketOrNull: io.nitric.proto.faas.v1.BucketNotification?
  get() = if (hasBucket()) getBucket() else null

