//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: proto/resource/v1/resource.proto

package io.nitric.proto.resource.v1;

@kotlin.jvm.JvmName("-initializeresource")
inline fun resource(block: io.nitric.proto.resource.v1.ResourceKt.Dsl.() -> kotlin.Unit): io.nitric.proto.resource.v1.Resource =
  io.nitric.proto.resource.v1.ResourceKt.Dsl._create(io.nitric.proto.resource.v1.Resource.newBuilder()).apply { block() }._build()
object ResourceKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: io.nitric.proto.resource.v1.Resource.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.nitric.proto.resource.v1.Resource.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.nitric.proto.resource.v1.Resource = _builder.build()

    /**
     * <code>.nitric.resource.v1.ResourceType type = 1;</code>
     */
     var type: io.nitric.proto.resource.v1.ResourceType
      @JvmName("getType")
      get() = _builder.getType()
      @JvmName("setType")
      set(value) {
        _builder.setType(value)
      }
    /**
     * <code>.nitric.resource.v1.ResourceType type = 1;</code>
     */
    fun clearType() {
      _builder.clearType()
    }

    /**
     * <code>string name = 2;</code>
     */
    var name: kotlin.String
      @JvmName("getName")
      get() = _builder.getName()
      @JvmName("setName")
      set(value) {
        _builder.setName(value)
      }
    /**
     * <code>string name = 2;</code>
     */
    fun clearName() {
      _builder.clearName()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun io.nitric.proto.resource.v1.Resource.copy(block: io.nitric.proto.resource.v1.ResourceKt.Dsl.() -> kotlin.Unit): io.nitric.proto.resource.v1.Resource =
  io.nitric.proto.resource.v1.ResourceKt.Dsl._create(this.toBuilder()).apply { block() }._build()

