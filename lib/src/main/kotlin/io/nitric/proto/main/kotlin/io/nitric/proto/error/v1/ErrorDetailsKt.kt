//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: proto/error/v1/error.proto

package io.nitric.proto.error.v1;

@kotlin.jvm.JvmName("-initializeerrorDetails")
inline fun errorDetails(block: io.nitric.proto.error.v1.ErrorDetailsKt.Dsl.() -> kotlin.Unit): io.nitric.proto.error.v1.ErrorDetails =
  io.nitric.proto.error.v1.ErrorDetailsKt.Dsl._create(io.nitric.proto.error.v1.ErrorDetails.newBuilder()).apply { block() }._build()
object ErrorDetailsKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: io.nitric.proto.error.v1.ErrorDetails.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.nitric.proto.error.v1.ErrorDetails.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.nitric.proto.error.v1.ErrorDetails = _builder.build()

    /**
     * <pre>
     * The developer error message, explaining the error and ideally solution.
     * </pre>
     *
     * <code>string message = 1;</code>
     */
    var message: kotlin.String
      @JvmName("getMessage")
      get() = _builder.getMessage()
      @JvmName("setMessage")
      set(value) {
        _builder.setMessage(value)
      }
    /**
     * <pre>
     * The developer error message, explaining the error and ideally solution.
     * </pre>
     *
     * <code>string message = 1;</code>
     */
    fun clearMessage() {
      _builder.clearMessage()
    }

    /**
     * <pre>
     * The error root cause.
     * </pre>
     *
     * <code>string cause = 2;</code>
     */
    var cause: kotlin.String
      @JvmName("getCause")
      get() = _builder.getCause()
      @JvmName("setCause")
      set(value) {
        _builder.setCause(value)
      }
    /**
     * <pre>
     * The error root cause.
     * </pre>
     *
     * <code>string cause = 2;</code>
     */
    fun clearCause() {
      _builder.clearCause()
    }

    /**
     * <pre>
     * The scope of the error.
     * </pre>
     *
     * <code>.nitric.error.v1.ErrorScope scope = 3;</code>
     */
    var scope: io.nitric.proto.error.v1.ErrorScope
      @JvmName("getScope")
      get() = _builder.getScope()
      @JvmName("setScope")
      set(value) {
        _builder.setScope(value)
      }
    /**
     * <pre>
     * The scope of the error.
     * </pre>
     *
     * <code>.nitric.error.v1.ErrorScope scope = 3;</code>
     */
    fun clearScope() {
      _builder.clearScope()
    }
    /**
     * <pre>
     * The scope of the error.
     * </pre>
     *
     * <code>.nitric.error.v1.ErrorScope scope = 3;</code>
     * @return Whether the scope field is set.
     */
    fun hasScope(): kotlin.Boolean {
      return _builder.hasScope()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun io.nitric.proto.error.v1.ErrorDetails.copy(block: io.nitric.proto.error.v1.ErrorDetailsKt.Dsl.() -> kotlin.Unit): io.nitric.proto.error.v1.ErrorDetails =
  io.nitric.proto.error.v1.ErrorDetailsKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val io.nitric.proto.error.v1.ErrorDetailsOrBuilder.scopeOrNull: io.nitric.proto.error.v1.ErrorScope?
  get() = if (hasScope()) getScope() else null

