//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: proto/resource/v1/resource.proto

package io.nitric.proto.resource.v1;

@kotlin.jvm.JvmName("-initializeresourceDetailsResponse")
inline fun resourceDetailsResponse(block: io.nitric.proto.resource.v1.ResourceDetailsResponseKt.Dsl.() -> kotlin.Unit): io.nitric.proto.resource.v1.ResourceDetailsResponse =
  io.nitric.proto.resource.v1.ResourceDetailsResponseKt.Dsl._create(io.nitric.proto.resource.v1.ResourceDetailsResponse.newBuilder()).apply { block() }._build()
object ResourceDetailsResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: io.nitric.proto.resource.v1.ResourceDetailsResponse.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.nitric.proto.resource.v1.ResourceDetailsResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.nitric.proto.resource.v1.ResourceDetailsResponse = _builder.build()

    /**
     * <pre>
     * The identifier of the resource
     * </pre>
     *
     * <code>string id = 1;</code>
     */
    var id: kotlin.String
      @JvmName("getId")
      get() = _builder.getId()
      @JvmName("setId")
      set(value) {
        _builder.setId(value)
      }
    /**
     * <pre>
     * The identifier of the resource
     * </pre>
     *
     * <code>string id = 1;</code>
     */
    fun clearId() {
      _builder.clearId()
    }

    /**
     * <pre>
     * The provider this resource is deployed with (e.g. aws)
     * </pre>
     *
     * <code>string provider = 2;</code>
     */
    var provider: kotlin.String
      @JvmName("getProvider")
      get() = _builder.getProvider()
      @JvmName("setProvider")
      set(value) {
        _builder.setProvider(value)
      }
    /**
     * <pre>
     * The provider this resource is deployed with (e.g. aws)
     * </pre>
     *
     * <code>string provider = 2;</code>
     */
    fun clearProvider() {
      _builder.clearProvider()
    }

    /**
     * <pre>
     * The service this resource is deployed on (e.g. ApiGateway)
     * </pre>
     *
     * <code>string service = 3;</code>
     */
    var service: kotlin.String
      @JvmName("getService")
      get() = _builder.getService()
      @JvmName("setService")
      set(value) {
        _builder.setService(value)
      }
    /**
     * <pre>
     * The service this resource is deployed on (e.g. ApiGateway)
     * </pre>
     *
     * <code>string service = 3;</code>
     */
    fun clearService() {
      _builder.clearService()
    }

    /**
     * <code>.nitric.resource.v1.ApiResourceDetails api = 10;</code>
     */
    var api: io.nitric.proto.resource.v1.ApiResourceDetails
      @JvmName("getApi")
      get() = _builder.getApi()
      @JvmName("setApi")
      set(value) {
        _builder.setApi(value)
      }
    /**
     * <code>.nitric.resource.v1.ApiResourceDetails api = 10;</code>
     */
    fun clearApi() {
      _builder.clearApi()
    }
    /**
     * <code>.nitric.resource.v1.ApiResourceDetails api = 10;</code>
     * @return Whether the api field is set.
     */
    fun hasApi(): kotlin.Boolean {
      return _builder.hasApi()
    }

    /**
     * <code>.nitric.resource.v1.WebsocketResourceDetails websocket = 11;</code>
     */
    var websocket: io.nitric.proto.resource.v1.WebsocketResourceDetails
      @JvmName("getWebsocket")
      get() = _builder.getWebsocket()
      @JvmName("setWebsocket")
      set(value) {
        _builder.setWebsocket(value)
      }
    /**
     * <code>.nitric.resource.v1.WebsocketResourceDetails websocket = 11;</code>
     */
    fun clearWebsocket() {
      _builder.clearWebsocket()
    }
    /**
     * <code>.nitric.resource.v1.WebsocketResourceDetails websocket = 11;</code>
     * @return Whether the websocket field is set.
     */
    fun hasWebsocket(): kotlin.Boolean {
      return _builder.hasWebsocket()
    }
    val detailsCase: io.nitric.proto.resource.v1.ResourceDetailsResponse.DetailsCase
      @JvmName("getDetailsCase")
      get() = _builder.getDetailsCase()

    fun clearDetails() {
      _builder.clearDetails()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun io.nitric.proto.resource.v1.ResourceDetailsResponse.copy(block: io.nitric.proto.resource.v1.ResourceDetailsResponseKt.Dsl.() -> kotlin.Unit): io.nitric.proto.resource.v1.ResourceDetailsResponse =
  io.nitric.proto.resource.v1.ResourceDetailsResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val io.nitric.proto.resource.v1.ResourceDetailsResponseOrBuilder.apiOrNull: io.nitric.proto.resource.v1.ApiResourceDetails?
  get() = if (hasApi()) getApi() else null

val io.nitric.proto.resource.v1.ResourceDetailsResponseOrBuilder.websocketOrNull: io.nitric.proto.resource.v1.WebsocketResourceDetails?
  get() = if (hasWebsocket()) getWebsocket() else null

