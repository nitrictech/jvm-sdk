//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: proto/resource/v1/resource.proto

package io.nitric.proto.resource.v1;

@kotlin.jvm.JvmName("-initializeapiResource")
inline fun apiResource(block: io.nitric.proto.resource.v1.ApiResourceKt.Dsl.() -> kotlin.Unit): io.nitric.proto.resource.v1.ApiResource =
  io.nitric.proto.resource.v1.ApiResourceKt.Dsl._create(io.nitric.proto.resource.v1.ApiResource.newBuilder()).apply { block() }._build()
object ApiResourceKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: io.nitric.proto.resource.v1.ApiResource.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.nitric.proto.resource.v1.ApiResource.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.nitric.proto.resource.v1.ApiResource = _builder.build()

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class SecurityDefinitionsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * Security definitions for the api
     * These may be used by registered routes and operations on the API
     * </pre>
     *
     * <code>map&lt;string, .nitric.resource.v1.ApiSecurityDefinition&gt; security_definitions = 1;</code>
     */
     val securityDefinitions: com.google.protobuf.kotlin.DslMap<kotlin.String, io.nitric.proto.resource.v1.ApiSecurityDefinition, SecurityDefinitionsProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getSecurityDefinitionsMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getSecurityDefinitionsMap()
      )
    /**
     * <pre>
     * Security definitions for the api
     * These may be used by registered routes and operations on the API
     * </pre>
     *
     * <code>map&lt;string, .nitric.resource.v1.ApiSecurityDefinition&gt; security_definitions = 1;</code>
     */
    @JvmName("putSecurityDefinitions")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, io.nitric.proto.resource.v1.ApiSecurityDefinition, SecurityDefinitionsProxy>
      .put(key: kotlin.String, value: io.nitric.proto.resource.v1.ApiSecurityDefinition) {
         _builder.putSecurityDefinitions(key, value)
       }
    /**
     * <pre>
     * Security definitions for the api
     * These may be used by registered routes and operations on the API
     * </pre>
     *
     * <code>map&lt;string, .nitric.resource.v1.ApiSecurityDefinition&gt; security_definitions = 1;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setSecurityDefinitions")
    @Suppress("NOTHING_TO_INLINE")
    inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, io.nitric.proto.resource.v1.ApiSecurityDefinition, SecurityDefinitionsProxy>
      .set(key: kotlin.String, value: io.nitric.proto.resource.v1.ApiSecurityDefinition) {
         put(key, value)
       }
    /**
     * <pre>
     * Security definitions for the api
     * These may be used by registered routes and operations on the API
     * </pre>
     *
     * <code>map&lt;string, .nitric.resource.v1.ApiSecurityDefinition&gt; security_definitions = 1;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeSecurityDefinitions")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, io.nitric.proto.resource.v1.ApiSecurityDefinition, SecurityDefinitionsProxy>
      .remove(key: kotlin.String) {
         _builder.removeSecurityDefinitions(key)
       }
    /**
     * <pre>
     * Security definitions for the api
     * These may be used by registered routes and operations on the API
     * </pre>
     *
     * <code>map&lt;string, .nitric.resource.v1.ApiSecurityDefinition&gt; security_definitions = 1;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllSecurityDefinitions")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, io.nitric.proto.resource.v1.ApiSecurityDefinition, SecurityDefinitionsProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, io.nitric.proto.resource.v1.ApiSecurityDefinition>) {
         _builder.putAllSecurityDefinitions(map)
       }
    /**
     * <pre>
     * Security definitions for the api
     * These may be used by registered routes and operations on the API
     * </pre>
     *
     * <code>map&lt;string, .nitric.resource.v1.ApiSecurityDefinition&gt; security_definitions = 1;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearSecurityDefinitions")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, io.nitric.proto.resource.v1.ApiSecurityDefinition, SecurityDefinitionsProxy>
      .clear() {
         _builder.clearSecurityDefinitions()
       }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class SecurityProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * root level security for this api
     * </pre>
     *
     * <code>map&lt;string, .nitric.resource.v1.ApiScopes&gt; security = 2;</code>
     */
     val security: com.google.protobuf.kotlin.DslMap<kotlin.String, io.nitric.proto.resource.v1.ApiScopes, SecurityProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getSecurityMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getSecurityMap()
      )
    /**
     * <pre>
     * root level security for this api
     * </pre>
     *
     * <code>map&lt;string, .nitric.resource.v1.ApiScopes&gt; security = 2;</code>
     */
    @JvmName("putSecurity")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, io.nitric.proto.resource.v1.ApiScopes, SecurityProxy>
      .put(key: kotlin.String, value: io.nitric.proto.resource.v1.ApiScopes) {
         _builder.putSecurity(key, value)
       }
    /**
     * <pre>
     * root level security for this api
     * </pre>
     *
     * <code>map&lt;string, .nitric.resource.v1.ApiScopes&gt; security = 2;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setSecurity")
    @Suppress("NOTHING_TO_INLINE")
    inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, io.nitric.proto.resource.v1.ApiScopes, SecurityProxy>
      .set(key: kotlin.String, value: io.nitric.proto.resource.v1.ApiScopes) {
         put(key, value)
       }
    /**
     * <pre>
     * root level security for this api
     * </pre>
     *
     * <code>map&lt;string, .nitric.resource.v1.ApiScopes&gt; security = 2;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeSecurity")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, io.nitric.proto.resource.v1.ApiScopes, SecurityProxy>
      .remove(key: kotlin.String) {
         _builder.removeSecurity(key)
       }
    /**
     * <pre>
     * root level security for this api
     * </pre>
     *
     * <code>map&lt;string, .nitric.resource.v1.ApiScopes&gt; security = 2;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllSecurity")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, io.nitric.proto.resource.v1.ApiScopes, SecurityProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, io.nitric.proto.resource.v1.ApiScopes>) {
         _builder.putAllSecurity(map)
       }
    /**
     * <pre>
     * root level security for this api
     * </pre>
     *
     * <code>map&lt;string, .nitric.resource.v1.ApiScopes&gt; security = 2;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearSecurity")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, io.nitric.proto.resource.v1.ApiScopes, SecurityProxy>
      .clear() {
         _builder.clearSecurity()
       }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun io.nitric.proto.resource.v1.ApiResource.copy(block: io.nitric.proto.resource.v1.ApiResourceKt.Dsl.() -> kotlin.Unit): io.nitric.proto.resource.v1.ApiResource =
  io.nitric.proto.resource.v1.ApiResourceKt.Dsl._create(this.toBuilder()).apply { block() }._build()

