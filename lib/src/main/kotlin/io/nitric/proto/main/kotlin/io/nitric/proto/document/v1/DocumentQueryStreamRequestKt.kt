//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: proto/document/v1/document.proto

package io.nitric.proto.document.v1;

@kotlin.jvm.JvmName("-initializedocumentQueryStreamRequest")
inline fun documentQueryStreamRequest(block: io.nitric.proto.document.v1.DocumentQueryStreamRequestKt.Dsl.() -> kotlin.Unit): io.nitric.proto.document.v1.DocumentQueryStreamRequest =
  io.nitric.proto.document.v1.DocumentQueryStreamRequestKt.Dsl._create(io.nitric.proto.document.v1.DocumentQueryStreamRequest.newBuilder()).apply { block() }._build()
object DocumentQueryStreamRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: io.nitric.proto.document.v1.DocumentQueryStreamRequest.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.nitric.proto.document.v1.DocumentQueryStreamRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.nitric.proto.document.v1.DocumentQueryStreamRequest = _builder.build()

    /**
     * <pre>
     * The collection to query
     * </pre>
     *
     * <code>.nitric.document.v1.Collection collection = 1 [(.validate.rules) = { ... }</code>
     */
    var collection: io.nitric.proto.document.v1.Collection
      @JvmName("getCollection")
      get() = _builder.getCollection()
      @JvmName("setCollection")
      set(value) {
        _builder.setCollection(value)
      }
    /**
     * <pre>
     * The collection to query
     * </pre>
     *
     * <code>.nitric.document.v1.Collection collection = 1 [(.validate.rules) = { ... }</code>
     */
    fun clearCollection() {
      _builder.clearCollection()
    }
    /**
     * <pre>
     * The collection to query
     * </pre>
     *
     * <code>.nitric.document.v1.Collection collection = 1 [(.validate.rules) = { ... }</code>
     * @return Whether the collection field is set.
     */
    fun hasCollection(): kotlin.Boolean {
      return _builder.hasCollection()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class ExpressionsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * Optional query expressions
     * </pre>
     *
     * <code>repeated .nitric.document.v1.Expression expressions = 3;</code>
     */
     val expressions: com.google.protobuf.kotlin.DslList<io.nitric.proto.document.v1.Expression, ExpressionsProxy>
      @kotlin.jvm.JvmSynthetic
      get() = com.google.protobuf.kotlin.DslList(
        _builder.getExpressionsList()
      )
    /**
     * <pre>
     * Optional query expressions
     * </pre>
     *
     * <code>repeated .nitric.document.v1.Expression expressions = 3;</code>
     * @param value The expressions to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addExpressions")
    fun com.google.protobuf.kotlin.DslList<io.nitric.proto.document.v1.Expression, ExpressionsProxy>.add(value: io.nitric.proto.document.v1.Expression) {
      _builder.addExpressions(value)
    }
    /**
     * <pre>
     * Optional query expressions
     * </pre>
     *
     * <code>repeated .nitric.document.v1.Expression expressions = 3;</code>
     * @param value The expressions to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignExpressions")
    @Suppress("NOTHING_TO_INLINE")
    inline operator fun com.google.protobuf.kotlin.DslList<io.nitric.proto.document.v1.Expression, ExpressionsProxy>.plusAssign(value: io.nitric.proto.document.v1.Expression) {
      add(value)
    }
    /**
     * <pre>
     * Optional query expressions
     * </pre>
     *
     * <code>repeated .nitric.document.v1.Expression expressions = 3;</code>
     * @param values The expressions to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("addAllExpressions")
    fun com.google.protobuf.kotlin.DslList<io.nitric.proto.document.v1.Expression, ExpressionsProxy>.addAll(values: kotlin.collections.Iterable<io.nitric.proto.document.v1.Expression>) {
      _builder.addAllExpressions(values)
    }
    /**
     * <pre>
     * Optional query expressions
     * </pre>
     *
     * <code>repeated .nitric.document.v1.Expression expressions = 3;</code>
     * @param values The expressions to add.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("plusAssignAllExpressions")
    @Suppress("NOTHING_TO_INLINE")
    inline operator fun com.google.protobuf.kotlin.DslList<io.nitric.proto.document.v1.Expression, ExpressionsProxy>.plusAssign(values: kotlin.collections.Iterable<io.nitric.proto.document.v1.Expression>) {
      addAll(values)
    }
    /**
     * <pre>
     * Optional query expressions
     * </pre>
     *
     * <code>repeated .nitric.document.v1.Expression expressions = 3;</code>
     * @param index The index to set the value at.
     * @param value The expressions to set.
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("setExpressions")
    operator fun com.google.protobuf.kotlin.DslList<io.nitric.proto.document.v1.Expression, ExpressionsProxy>.set(index: kotlin.Int, value: io.nitric.proto.document.v1.Expression) {
      _builder.setExpressions(index, value)
    }
    /**
     * <pre>
     * Optional query expressions
     * </pre>
     *
     * <code>repeated .nitric.document.v1.Expression expressions = 3;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @kotlin.jvm.JvmName("clearExpressions")
    fun com.google.protobuf.kotlin.DslList<io.nitric.proto.document.v1.Expression, ExpressionsProxy>.clear() {
      _builder.clearExpressions()
    }


    /**
     * <pre>
     * Optional query fetch limit
     * </pre>
     *
     * <code>int32 limit = 4;</code>
     */
    var limit: kotlin.Int
      @JvmName("getLimit")
      get() = _builder.getLimit()
      @JvmName("setLimit")
      set(value) {
        _builder.setLimit(value)
      }
    /**
     * <pre>
     * Optional query fetch limit
     * </pre>
     *
     * <code>int32 limit = 4;</code>
     */
    fun clearLimit() {
      _builder.clearLimit()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun io.nitric.proto.document.v1.DocumentQueryStreamRequest.copy(block: io.nitric.proto.document.v1.DocumentQueryStreamRequestKt.Dsl.() -> kotlin.Unit): io.nitric.proto.document.v1.DocumentQueryStreamRequest =
  io.nitric.proto.document.v1.DocumentQueryStreamRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val io.nitric.proto.document.v1.DocumentQueryStreamRequestOrBuilder.collectionOrNull: io.nitric.proto.document.v1.Collection?
  get() = if (hasCollection()) getCollection() else null

