//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: proto/deploy/v1/deploy.proto

package io.nitric.proto.deploy.v1;

@kotlin.jvm.JvmName("-initializeexecutionUnit")
inline fun executionUnit(block: io.nitric.proto.deploy.v1.ExecutionUnitKt.Dsl.() -> kotlin.Unit): io.nitric.proto.deploy.v1.ExecutionUnit =
  io.nitric.proto.deploy.v1.ExecutionUnitKt.Dsl._create(io.nitric.proto.deploy.v1.ExecutionUnit.newBuilder()).apply { block() }._build()
object ExecutionUnitKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: io.nitric.proto.deploy.v1.ExecutionUnit.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.nitric.proto.deploy.v1.ExecutionUnit.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.nitric.proto.deploy.v1.ExecutionUnit = _builder.build()

    /**
     * <pre>
     * Container image as a execution unit
     * </pre>
     *
     * <code>.nitric.deploy.v1.ImageSource image = 1;</code>
     */
    var image: io.nitric.proto.deploy.v1.ImageSource
      @JvmName("getImage")
      get() = _builder.getImage()
      @JvmName("setImage")
      set(value) {
        _builder.setImage(value)
      }
    /**
     * <pre>
     * Container image as a execution unit
     * </pre>
     *
     * <code>.nitric.deploy.v1.ImageSource image = 1;</code>
     */
    fun clearImage() {
      _builder.clearImage()
    }
    /**
     * <pre>
     * Container image as a execution unit
     * </pre>
     *
     * <code>.nitric.deploy.v1.ImageSource image = 1;</code>
     * @return Whether the image field is set.
     */
    fun hasImage(): kotlin.Boolean {
      return _builder.hasImage()
    }

    /**
     * <pre>
     * Expected worker count for this execution unit
     * </pre>
     *
     * <code>int32 workers = 10;</code>
     */
    var workers: kotlin.Int
      @JvmName("getWorkers")
      get() = _builder.getWorkers()
      @JvmName("setWorkers")
      set(value) {
        _builder.setWorkers(value)
      }
    /**
     * <pre>
     * Expected worker count for this execution unit
     * </pre>
     *
     * <code>int32 workers = 10;</code>
     */
    fun clearWorkers() {
      _builder.clearWorkers()
    }

    /**
     * <pre>
     * Configurable timeout for request handling
     * </pre>
     *
     * <code>int32 timeout = 11 [deprecated = true];</code>
     */
    @kotlin.Deprecated(message = "Field timeout is deprecated") var timeout: kotlin.Int
      @JvmName("getTimeout")
      get() = _builder.getTimeout()
      @JvmName("setTimeout")
      set(value) {
        _builder.setTimeout(value)
      }
    /**
     * <pre>
     * Configurable timeout for request handling
     * </pre>
     *
     * <code>int32 timeout = 11 [deprecated = true];</code>
     * @deprecated nitric.deploy.v1.ExecutionUnit.timeout is deprecated.
     *     See proto/deploy/v1/deploy.proto;l=108
     */
    fun clearTimeout() {
      _builder.clearTimeout()
    }

    /**
     * <pre>
     * Configurable memory size for this instance
     * </pre>
     *
     * <code>int32 memory = 12 [deprecated = true];</code>
     */
    @kotlin.Deprecated(message = "Field memory is deprecated") var memory: kotlin.Int
      @JvmName("getMemory")
      get() = _builder.getMemory()
      @JvmName("setMemory")
      set(value) {
        _builder.setMemory(value)
      }
    /**
     * <pre>
     * Configurable memory size for this instance
     * </pre>
     *
     * <code>int32 memory = 12 [deprecated = true];</code>
     * @deprecated nitric.deploy.v1.ExecutionUnit.memory is deprecated.
     *     See proto/deploy/v1/deploy.proto;l=110
     */
    fun clearMemory() {
      _builder.clearMemory()
    }

    /**
     * <pre>
     * A simple type property
     * describes the requested type of execution unit that this should be
     * for this project, a provider can implement how this request is satisfied
     * in any way
     * </pre>
     *
     * <code>string type = 13;</code>
     */
    var type: kotlin.String
      @JvmName("getType")
      get() = _builder.getType()
      @JvmName("setType")
      set(value) {
        _builder.setType(value)
      }
    /**
     * <pre>
     * A simple type property
     * describes the requested type of execution unit that this should be
     * for this project, a provider can implement how this request is satisfied
     * in any way
     * </pre>
     *
     * <code>string type = 13;</code>
     */
    fun clearType() {
      _builder.clearType()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class EnvProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * Environment variables for this execution unit
     * </pre>
     *
     * <code>map&lt;string, string&gt; env = 14;</code>
     */
     val env: com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, EnvProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getEnvMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getEnvMap()
      )
    /**
     * <pre>
     * Environment variables for this execution unit
     * </pre>
     *
     * <code>map&lt;string, string&gt; env = 14;</code>
     */
    @JvmName("putEnv")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, EnvProxy>
      .put(key: kotlin.String, value: kotlin.String) {
         _builder.putEnv(key, value)
       }
    /**
     * <pre>
     * Environment variables for this execution unit
     * </pre>
     *
     * <code>map&lt;string, string&gt; env = 14;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setEnv")
    @Suppress("NOTHING_TO_INLINE")
    inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, EnvProxy>
      .set(key: kotlin.String, value: kotlin.String) {
         put(key, value)
       }
    /**
     * <pre>
     * Environment variables for this execution unit
     * </pre>
     *
     * <code>map&lt;string, string&gt; env = 14;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeEnv")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, EnvProxy>
      .remove(key: kotlin.String) {
         _builder.removeEnv(key)
       }
    /**
     * <pre>
     * Environment variables for this execution unit
     * </pre>
     *
     * <code>map&lt;string, string&gt; env = 14;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllEnv")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, EnvProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, kotlin.String>) {
         _builder.putAllEnv(map)
       }
    /**
     * <pre>
     * Environment variables for this execution unit
     * </pre>
     *
     * <code>map&lt;string, string&gt; env = 14;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearEnv")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, EnvProxy>
      .clear() {
         _builder.clearEnv()
       }
    val sourceCase: io.nitric.proto.deploy.v1.ExecutionUnit.SourceCase
      @JvmName("getSourceCase")
      get() = _builder.getSourceCase()

    fun clearSource() {
      _builder.clearSource()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun io.nitric.proto.deploy.v1.ExecutionUnit.copy(block: io.nitric.proto.deploy.v1.ExecutionUnitKt.Dsl.() -> kotlin.Unit): io.nitric.proto.deploy.v1.ExecutionUnit =
  io.nitric.proto.deploy.v1.ExecutionUnitKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val io.nitric.proto.deploy.v1.ExecutionUnitOrBuilder.imageOrNull: io.nitric.proto.deploy.v1.ImageSource?
  get() = if (hasImage()) getImage() else null

