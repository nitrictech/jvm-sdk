//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: proto/faas/v1/faas.proto

package io.nitric.proto.faas.v1;

@kotlin.jvm.JvmName("-initializebucketNotificationConfig")
inline fun bucketNotificationConfig(block: io.nitric.proto.faas.v1.BucketNotificationConfigKt.Dsl.() -> kotlin.Unit): io.nitric.proto.faas.v1.BucketNotificationConfig =
  io.nitric.proto.faas.v1.BucketNotificationConfigKt.Dsl._create(io.nitric.proto.faas.v1.BucketNotificationConfig.newBuilder()).apply { block() }._build()
object BucketNotificationConfigKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: io.nitric.proto.faas.v1.BucketNotificationConfig.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.nitric.proto.faas.v1.BucketNotificationConfig.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.nitric.proto.faas.v1.BucketNotificationConfig = _builder.build()

    /**
     * <code>.nitric.faas.v1.BucketNotificationType notification_type = 1;</code>
     */
     var notificationType: io.nitric.proto.faas.v1.BucketNotificationType
      @JvmName("getNotificationType")
      get() = _builder.getNotificationType()
      @JvmName("setNotificationType")
      set(value) {
        _builder.setNotificationType(value)
      }
    /**
     * <code>.nitric.faas.v1.BucketNotificationType notification_type = 1;</code>
     */
    fun clearNotificationType() {
      _builder.clearNotificationType()
    }

    /**
     * <pre>
     * A notification filter is a prefix for a bucket object in which creations or deletions should trigger a notification:
     * e.g. Notification filter: /images/cat and Event Type: created, would trigger on creating /images/cat.png and /images/cat.jpg but not creating /cat.png
     * </pre>
     *
     * <code>string notification_prefix_filter = 2;</code>
     */
    var notificationPrefixFilter: kotlin.String
      @JvmName("getNotificationPrefixFilter")
      get() = _builder.getNotificationPrefixFilter()
      @JvmName("setNotificationPrefixFilter")
      set(value) {
        _builder.setNotificationPrefixFilter(value)
      }
    /**
     * <pre>
     * A notification filter is a prefix for a bucket object in which creations or deletions should trigger a notification:
     * e.g. Notification filter: /images/cat and Event Type: created, would trigger on creating /images/cat.png and /images/cat.jpg but not creating /cat.png
     * </pre>
     *
     * <code>string notification_prefix_filter = 2;</code>
     */
    fun clearNotificationPrefixFilter() {
      _builder.clearNotificationPrefixFilter()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun io.nitric.proto.faas.v1.BucketNotificationConfig.copy(block: io.nitric.proto.faas.v1.BucketNotificationConfigKt.Dsl.() -> kotlin.Unit): io.nitric.proto.faas.v1.BucketNotificationConfig =
  io.nitric.proto.faas.v1.BucketNotificationConfigKt.Dsl._create(this.toBuilder()).apply { block() }._build()

