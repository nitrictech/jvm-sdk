//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: proto/deploy/v1/deploy.proto

package io.nitric.proto.deploy.v1;

@kotlin.jvm.JvmName("-initializeapi")
inline fun api(block: io.nitric.proto.deploy.v1.ApiKt.Dsl.() -> kotlin.Unit): io.nitric.proto.deploy.v1.Api =
  io.nitric.proto.deploy.v1.ApiKt.Dsl._create(io.nitric.proto.deploy.v1.Api.newBuilder()).apply { block() }._build()
object ApiKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: io.nitric.proto.deploy.v1.Api.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.nitric.proto.deploy.v1.Api.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.nitric.proto.deploy.v1.Api = _builder.build()

    /**
     * <pre>
     * An OpenAPI document for deployment
     * This document will contain extensions that hint of execution units that should be targeted as part of the deployment
     * </pre>
     *
     * <code>string openapi = 1;</code>
     */
    var openapi: kotlin.String
      @JvmName("getOpenapi")
      get() = _builder.getOpenapi()
      @JvmName("setOpenapi")
      set(value) {
        _builder.setOpenapi(value)
      }
    /**
     * <pre>
     * An OpenAPI document for deployment
     * This document will contain extensions that hint of execution units that should be targeted as part of the deployment
     * </pre>
     *
     * <code>string openapi = 1;</code>
     */
    fun clearOpenapi() {
      _builder.clearOpenapi()
    }
    /**
     * <pre>
     * An OpenAPI document for deployment
     * This document will contain extensions that hint of execution units that should be targeted as part of the deployment
     * </pre>
     *
     * <code>string openapi = 1;</code>
     * @return Whether the openapi field is set.
     */
    fun hasOpenapi(): kotlin.Boolean {
      return _builder.hasOpenapi()
    }
    val documentCase: io.nitric.proto.deploy.v1.Api.DocumentCase
      @JvmName("getDocumentCase")
      get() = _builder.getDocumentCase()

    fun clearDocument() {
      _builder.clearDocument()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun io.nitric.proto.deploy.v1.Api.copy(block: io.nitric.proto.deploy.v1.ApiKt.Dsl.() -> kotlin.Unit): io.nitric.proto.deploy.v1.Api =
  io.nitric.proto.deploy.v1.ApiKt.Dsl._create(this.toBuilder()).apply { block() }._build()

