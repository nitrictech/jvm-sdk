//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: proto/deploy/v1/deploy.proto

package io.nitric.proto.deploy.v1;

@kotlin.jvm.JvmName("-initializehttp")
inline fun http(block: io.nitric.proto.deploy.v1.HttpKt.Dsl.() -> kotlin.Unit): io.nitric.proto.deploy.v1.Http =
  io.nitric.proto.deploy.v1.HttpKt.Dsl._create(io.nitric.proto.deploy.v1.Http.newBuilder()).apply { block() }._build()
object HttpKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: io.nitric.proto.deploy.v1.Http.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.nitric.proto.deploy.v1.Http.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.nitric.proto.deploy.v1.Http = _builder.build()

    /**
     * <code>.nitric.deploy.v1.HttpTarget target = 1;</code>
     */
    var target: io.nitric.proto.deploy.v1.HttpTarget
      @JvmName("getTarget")
      get() = _builder.getTarget()
      @JvmName("setTarget")
      set(value) {
        _builder.setTarget(value)
      }
    /**
     * <code>.nitric.deploy.v1.HttpTarget target = 1;</code>
     */
    fun clearTarget() {
      _builder.clearTarget()
    }
    /**
     * <code>.nitric.deploy.v1.HttpTarget target = 1;</code>
     * @return Whether the target field is set.
     */
    fun hasTarget(): kotlin.Boolean {
      return _builder.hasTarget()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun io.nitric.proto.deploy.v1.Http.copy(block: io.nitric.proto.deploy.v1.HttpKt.Dsl.() -> kotlin.Unit): io.nitric.proto.deploy.v1.Http =
  io.nitric.proto.deploy.v1.HttpKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val io.nitric.proto.deploy.v1.HttpOrBuilder.targetOrNull: io.nitric.proto.deploy.v1.HttpTarget?
  get() = if (hasTarget()) getTarget() else null

