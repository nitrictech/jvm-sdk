//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: proto/storage/v1/storage.proto

package io.nitric.proto.storage.v1;

@kotlin.jvm.JvmName("-initializestorageExistsResponse")
inline fun storageExistsResponse(block: io.nitric.proto.storage.v1.StorageExistsResponseKt.Dsl.() -> kotlin.Unit): io.nitric.proto.storage.v1.StorageExistsResponse =
  io.nitric.proto.storage.v1.StorageExistsResponseKt.Dsl._create(io.nitric.proto.storage.v1.StorageExistsResponse.newBuilder()).apply { block() }._build()
object StorageExistsResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: io.nitric.proto.storage.v1.StorageExistsResponse.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.nitric.proto.storage.v1.StorageExistsResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.nitric.proto.storage.v1.StorageExistsResponse = _builder.build()

    /**
     * <code>bool exists = 1;</code>
     */
    var exists: kotlin.Boolean
      @JvmName("getExists")
      get() = _builder.getExists()
      @JvmName("setExists")
      set(value) {
        _builder.setExists(value)
      }
    /**
     * <code>bool exists = 1;</code>
     */
    fun clearExists() {
      _builder.clearExists()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun io.nitric.proto.storage.v1.StorageExistsResponse.copy(block: io.nitric.proto.storage.v1.StorageExistsResponseKt.Dsl.() -> kotlin.Unit): io.nitric.proto.storage.v1.StorageExistsResponse =
  io.nitric.proto.storage.v1.StorageExistsResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

