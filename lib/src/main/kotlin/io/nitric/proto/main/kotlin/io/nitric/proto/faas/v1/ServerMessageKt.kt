//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: proto/faas/v1/faas.proto

package io.nitric.proto.faas.v1;

@kotlin.jvm.JvmName("-initializeserverMessage")
inline fun serverMessage(block: io.nitric.proto.faas.v1.ServerMessageKt.Dsl.() -> kotlin.Unit): io.nitric.proto.faas.v1.ServerMessage =
  io.nitric.proto.faas.v1.ServerMessageKt.Dsl._create(io.nitric.proto.faas.v1.ServerMessage.newBuilder()).apply { block() }._build()
object ServerMessageKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: io.nitric.proto.faas.v1.ServerMessage.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.nitric.proto.faas.v1.ServerMessage.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.nitric.proto.faas.v1.ServerMessage = _builder.build()

    /**
     * <pre>
     * Server message ID, used to pair requests/responses
     * </pre>
     *
     * <code>string id = 1;</code>
     */
    var id: kotlin.String
      @JvmName("getId")
      get() = _builder.getId()
      @JvmName("setId")
      set(value) {
        _builder.setId(value)
      }
    /**
     * <pre>
     * Server message ID, used to pair requests/responses
     * </pre>
     *
     * <code>string id = 1;</code>
     */
    fun clearId() {
      _builder.clearId()
    }

    /**
     * <pre>
     * Server responding
     * with client configuration details to an
     * InitRequest
     * </pre>
     *
     * <code>.nitric.faas.v1.InitResponse init_response = 2;</code>
     */
    var initResponse: io.nitric.proto.faas.v1.InitResponse
      @JvmName("getInitResponse")
      get() = _builder.getInitResponse()
      @JvmName("setInitResponse")
      set(value) {
        _builder.setInitResponse(value)
      }
    /**
     * <pre>
     * Server responding
     * with client configuration details to an
     * InitRequest
     * </pre>
     *
     * <code>.nitric.faas.v1.InitResponse init_response = 2;</code>
     */
    fun clearInitResponse() {
      _builder.clearInitResponse()
    }
    /**
     * <pre>
     * Server responding
     * with client configuration details to an
     * InitRequest
     * </pre>
     *
     * <code>.nitric.faas.v1.InitResponse init_response = 2;</code>
     * @return Whether the initResponse field is set.
     */
    fun hasInitResponse(): kotlin.Boolean {
      return _builder.hasInitResponse()
    }

    /**
     * <pre>
     * Server requesting client to
     * process a trigger
     * </pre>
     *
     * <code>.nitric.faas.v1.TriggerRequest trigger_request = 3;</code>
     */
    var triggerRequest: io.nitric.proto.faas.v1.TriggerRequest
      @JvmName("getTriggerRequest")
      get() = _builder.getTriggerRequest()
      @JvmName("setTriggerRequest")
      set(value) {
        _builder.setTriggerRequest(value)
      }
    /**
     * <pre>
     * Server requesting client to
     * process a trigger
     * </pre>
     *
     * <code>.nitric.faas.v1.TriggerRequest trigger_request = 3;</code>
     */
    fun clearTriggerRequest() {
      _builder.clearTriggerRequest()
    }
    /**
     * <pre>
     * Server requesting client to
     * process a trigger
     * </pre>
     *
     * <code>.nitric.faas.v1.TriggerRequest trigger_request = 3;</code>
     * @return Whether the triggerRequest field is set.
     */
    fun hasTriggerRequest(): kotlin.Boolean {
      return _builder.hasTriggerRequest()
    }
    val contentCase: io.nitric.proto.faas.v1.ServerMessage.ContentCase
      @JvmName("getContentCase")
      get() = _builder.getContentCase()

    fun clearContent() {
      _builder.clearContent()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun io.nitric.proto.faas.v1.ServerMessage.copy(block: io.nitric.proto.faas.v1.ServerMessageKt.Dsl.() -> kotlin.Unit): io.nitric.proto.faas.v1.ServerMessage =
  io.nitric.proto.faas.v1.ServerMessageKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val io.nitric.proto.faas.v1.ServerMessageOrBuilder.initResponseOrNull: io.nitric.proto.faas.v1.InitResponse?
  get() = if (hasInitResponse()) getInitResponse() else null

val io.nitric.proto.faas.v1.ServerMessageOrBuilder.triggerRequestOrNull: io.nitric.proto.faas.v1.TriggerRequest?
  get() = if (hasTriggerRequest()) getTriggerRequest() else null

