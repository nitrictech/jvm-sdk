//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: proto/event/v1/event.proto

package io.nitric.proto.event.v1;

@kotlin.jvm.JvmName("-initializenitricTopic")
inline fun nitricTopic(block: io.nitric.proto.event.v1.NitricTopicKt.Dsl.() -> kotlin.Unit): io.nitric.proto.event.v1.NitricTopic =
  io.nitric.proto.event.v1.NitricTopicKt.Dsl._create(io.nitric.proto.event.v1.NitricTopic.newBuilder()).apply { block() }._build()
object NitricTopicKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: io.nitric.proto.event.v1.NitricTopic.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.nitric.proto.event.v1.NitricTopic.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.nitric.proto.event.v1.NitricTopic = _builder.build()

    /**
     * <pre>
     * The Nitric name for the topic
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    var name: kotlin.String
      @JvmName("getName")
      get() = _builder.getName()
      @JvmName("setName")
      set(value) {
        _builder.setName(value)
      }
    /**
     * <pre>
     * The Nitric name for the topic
     * </pre>
     *
     * <code>string name = 1;</code>
     */
    fun clearName() {
      _builder.clearName()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun io.nitric.proto.event.v1.NitricTopic.copy(block: io.nitric.proto.event.v1.NitricTopicKt.Dsl.() -> kotlin.Unit): io.nitric.proto.event.v1.NitricTopic =
  io.nitric.proto.event.v1.NitricTopicKt.Dsl._create(this.toBuilder()).apply { block() }._build()

