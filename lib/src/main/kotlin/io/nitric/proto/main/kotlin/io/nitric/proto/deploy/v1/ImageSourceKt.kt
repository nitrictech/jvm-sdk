//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: proto/deploy/v1/deploy.proto

package io.nitric.proto.deploy.v1;

@kotlin.jvm.JvmName("-initializeimageSource")
inline fun imageSource(block: io.nitric.proto.deploy.v1.ImageSourceKt.Dsl.() -> kotlin.Unit): io.nitric.proto.deploy.v1.ImageSource =
  io.nitric.proto.deploy.v1.ImageSourceKt.Dsl._create(io.nitric.proto.deploy.v1.ImageSource.newBuilder()).apply { block() }._build()
object ImageSourceKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: io.nitric.proto.deploy.v1.ImageSource.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.nitric.proto.deploy.v1.ImageSource.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.nitric.proto.deploy.v1.ImageSource = _builder.build()

    /**
     * <pre>
     * URI of the docker image
     * TODO: May also need to provide auth information (although this should just be configured on the running client already)
     * </pre>
     *
     * <code>string uri = 1;</code>
     */
    var uri: kotlin.String
      @JvmName("getUri")
      get() = _builder.getUri()
      @JvmName("setUri")
      set(value) {
        _builder.setUri(value)
      }
    /**
     * <pre>
     * URI of the docker image
     * TODO: May also need to provide auth information (although this should just be configured on the running client already)
     * </pre>
     *
     * <code>string uri = 1;</code>
     */
    fun clearUri() {
      _builder.clearUri()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun io.nitric.proto.deploy.v1.ImageSource.copy(block: io.nitric.proto.deploy.v1.ImageSourceKt.Dsl.() -> kotlin.Unit): io.nitric.proto.deploy.v1.ImageSource =
  io.nitric.proto.deploy.v1.ImageSourceKt.Dsl._create(this.toBuilder()).apply { block() }._build()

