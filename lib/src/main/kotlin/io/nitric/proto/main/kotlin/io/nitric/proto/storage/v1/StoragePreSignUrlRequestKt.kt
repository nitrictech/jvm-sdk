//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: proto/storage/v1/storage.proto

package io.nitric.proto.storage.v1;

@kotlin.jvm.JvmName("-initializestoragePreSignUrlRequest")
inline fun storagePreSignUrlRequest(block: io.nitric.proto.storage.v1.StoragePreSignUrlRequestKt.Dsl.() -> kotlin.Unit): io.nitric.proto.storage.v1.StoragePreSignUrlRequest =
  io.nitric.proto.storage.v1.StoragePreSignUrlRequestKt.Dsl._create(io.nitric.proto.storage.v1.StoragePreSignUrlRequest.newBuilder()).apply { block() }._build()
object StoragePreSignUrlRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: io.nitric.proto.storage.v1.StoragePreSignUrlRequest.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.nitric.proto.storage.v1.StoragePreSignUrlRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.nitric.proto.storage.v1.StoragePreSignUrlRequest = _builder.build()

    /**
     * <pre>
     * Nitric name of the bucket to retrieve from
     *  this will be automatically resolved to the provider specific bucket identifier.
     * </pre>
     *
     * <code>string bucket_name = 1 [(.validate.rules) = { ... }</code>
     */
    var bucketName: kotlin.String
      @JvmName("getBucketName")
      get() = _builder.getBucketName()
      @JvmName("setBucketName")
      set(value) {
        _builder.setBucketName(value)
      }
    /**
     * <pre>
     * Nitric name of the bucket to retrieve from
     *  this will be automatically resolved to the provider specific bucket identifier.
     * </pre>
     *
     * <code>string bucket_name = 1 [(.validate.rules) = { ... }</code>
     */
    fun clearBucketName() {
      _builder.clearBucketName()
    }

    /**
     * <pre>
     * Key of item to generate the signed URL for.
     * The URL and the token it contains will only be valid for operations on this resource specifically.
     * </pre>
     *
     * <code>string key = 2 [(.validate.rules) = { ... }</code>
     */
    var key: kotlin.String
      @JvmName("getKey")
      get() = _builder.getKey()
      @JvmName("setKey")
      set(value) {
        _builder.setKey(value)
      }
    /**
     * <pre>
     * Key of item to generate the signed URL for.
     * The URL and the token it contains will only be valid for operations on this resource specifically.
     * </pre>
     *
     * <code>string key = 2 [(.validate.rules) = { ... }</code>
     */
    fun clearKey() {
      _builder.clearKey()
    }

    /**
     * <code>.nitric.storage.v1.StoragePreSignUrlRequest.Operation operation = 3;</code>
     */
     var operation: io.nitric.proto.storage.v1.StoragePreSignUrlRequest.Operation
      @JvmName("getOperation")
      get() = _builder.getOperation()
      @JvmName("setOperation")
      set(value) {
        _builder.setOperation(value)
      }
    /**
     * <code>.nitric.storage.v1.StoragePreSignUrlRequest.Operation operation = 3;</code>
     */
    fun clearOperation() {
      _builder.clearOperation()
    }

    /**
     * <pre>
     * Expiry time in seconds for the token included in the signed URL.
     *  Time starts from when the access token is generated, not when this request is made.
     *  e.g. time.Now().Add(expiry * time.Second) on the server
     * </pre>
     *
     * <code>uint32 expiry = 4;</code>
     */
    var expiry: kotlin.Int
      @JvmName("getExpiry")
      get() = _builder.getExpiry()
      @JvmName("setExpiry")
      set(value) {
        _builder.setExpiry(value)
      }
    /**
     * <pre>
     * Expiry time in seconds for the token included in the signed URL.
     *  Time starts from when the access token is generated, not when this request is made.
     *  e.g. time.Now().Add(expiry * time.Second) on the server
     * </pre>
     *
     * <code>uint32 expiry = 4;</code>
     */
    fun clearExpiry() {
      _builder.clearExpiry()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun io.nitric.proto.storage.v1.StoragePreSignUrlRequest.copy(block: io.nitric.proto.storage.v1.StoragePreSignUrlRequestKt.Dsl.() -> kotlin.Unit): io.nitric.proto.storage.v1.StoragePreSignUrlRequest =
  io.nitric.proto.storage.v1.StoragePreSignUrlRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

