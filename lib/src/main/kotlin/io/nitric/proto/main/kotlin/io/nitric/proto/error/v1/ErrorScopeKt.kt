//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: proto/error/v1/error.proto

package io.nitric.proto.error.v1;

@kotlin.jvm.JvmName("-initializeerrorScope")
inline fun errorScope(block: io.nitric.proto.error.v1.ErrorScopeKt.Dsl.() -> kotlin.Unit): io.nitric.proto.error.v1.ErrorScope =
  io.nitric.proto.error.v1.ErrorScopeKt.Dsl._create(io.nitric.proto.error.v1.ErrorScope.newBuilder()).apply { block() }._build()
object ErrorScopeKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: io.nitric.proto.error.v1.ErrorScope.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.nitric.proto.error.v1.ErrorScope.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.nitric.proto.error.v1.ErrorScope = _builder.build()

    /**
     * <pre>
     * The API service invoked, e.g. 'Service.Method'.
     * </pre>
     *
     * <code>string service = 1;</code>
     */
    var service: kotlin.String
      @JvmName("getService")
      get() = _builder.getService()
      @JvmName("setService")
      set(value) {
        _builder.setService(value)
      }
    /**
     * <pre>
     * The API service invoked, e.g. 'Service.Method'.
     * </pre>
     *
     * <code>string service = 1;</code>
     */
    fun clearService() {
      _builder.clearService()
    }

    /**
     * <pre>
     * The plugin method invoked, e.g. 'PluginService.Method'.
     * </pre>
     *
     * <code>string plugin = 2;</code>
     */
    var plugin: kotlin.String
      @JvmName("getPlugin")
      get() = _builder.getPlugin()
      @JvmName("setPlugin")
      set(value) {
        _builder.setPlugin(value)
      }
    /**
     * <pre>
     * The plugin method invoked, e.g. 'PluginService.Method'.
     * </pre>
     *
     * <code>string plugin = 2;</code>
     */
    fun clearPlugin() {
      _builder.clearPlugin()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class ArgsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * The plugin method arguments, ensure only non-sensitive data is specified.
     * </pre>
     *
     * <code>map&lt;string, string&gt; args = 3;</code>
     */
     val args: com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, ArgsProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getArgsMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getArgsMap()
      )
    /**
     * <pre>
     * The plugin method arguments, ensure only non-sensitive data is specified.
     * </pre>
     *
     * <code>map&lt;string, string&gt; args = 3;</code>
     */
    @JvmName("putArgs")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, ArgsProxy>
      .put(key: kotlin.String, value: kotlin.String) {
         _builder.putArgs(key, value)
       }
    /**
     * <pre>
     * The plugin method arguments, ensure only non-sensitive data is specified.
     * </pre>
     *
     * <code>map&lt;string, string&gt; args = 3;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setArgs")
    @Suppress("NOTHING_TO_INLINE")
    inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, ArgsProxy>
      .set(key: kotlin.String, value: kotlin.String) {
         put(key, value)
       }
    /**
     * <pre>
     * The plugin method arguments, ensure only non-sensitive data is specified.
     * </pre>
     *
     * <code>map&lt;string, string&gt; args = 3;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeArgs")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, ArgsProxy>
      .remove(key: kotlin.String) {
         _builder.removeArgs(key)
       }
    /**
     * <pre>
     * The plugin method arguments, ensure only non-sensitive data is specified.
     * </pre>
     *
     * <code>map&lt;string, string&gt; args = 3;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllArgs")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, ArgsProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, kotlin.String>) {
         _builder.putAllArgs(map)
       }
    /**
     * <pre>
     * The plugin method arguments, ensure only non-sensitive data is specified.
     * </pre>
     *
     * <code>map&lt;string, string&gt; args = 3;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearArgs")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, ArgsProxy>
      .clear() {
         _builder.clearArgs()
       }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun io.nitric.proto.error.v1.ErrorScope.copy(block: io.nitric.proto.error.v1.ErrorScopeKt.Dsl.() -> kotlin.Unit): io.nitric.proto.error.v1.ErrorScope =
  io.nitric.proto.error.v1.ErrorScopeKt.Dsl._create(this.toBuilder()).apply { block() }._build()

