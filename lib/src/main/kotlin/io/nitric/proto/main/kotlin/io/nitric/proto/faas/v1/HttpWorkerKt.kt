//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: proto/faas/v1/faas.proto

package io.nitric.proto.faas.v1;

@kotlin.jvm.JvmName("-initializehttpWorker")
inline fun httpWorker(block: io.nitric.proto.faas.v1.HttpWorkerKt.Dsl.() -> kotlin.Unit): io.nitric.proto.faas.v1.HttpWorker =
  io.nitric.proto.faas.v1.HttpWorkerKt.Dsl._create(io.nitric.proto.faas.v1.HttpWorker.newBuilder()).apply { block() }._build()
object HttpWorkerKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: io.nitric.proto.faas.v1.HttpWorker.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.nitric.proto.faas.v1.HttpWorker.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.nitric.proto.faas.v1.HttpWorker = _builder.build()

    /**
     * <pre>
     * The local port the server can be accessed on
     * </pre>
     *
     * <code>int32 port = 1;</code>
     */
    var port: kotlin.Int
      @JvmName("getPort")
      get() = _builder.getPort()
      @JvmName("setPort")
      set(value) {
        _builder.setPort(value)
      }
    /**
     * <pre>
     * The local port the server can be accessed on
     * </pre>
     *
     * <code>int32 port = 1;</code>
     */
    fun clearPort() {
      _builder.clearPort()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun io.nitric.proto.faas.v1.HttpWorker.copy(block: io.nitric.proto.faas.v1.HttpWorkerKt.Dsl.() -> kotlin.Unit): io.nitric.proto.faas.v1.HttpWorker =
  io.nitric.proto.faas.v1.HttpWorkerKt.Dsl._create(this.toBuilder()).apply { block() }._build()

