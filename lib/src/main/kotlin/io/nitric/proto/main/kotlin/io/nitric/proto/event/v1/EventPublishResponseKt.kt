//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: proto/event/v1/event.proto

package io.nitric.proto.event.v1;

@kotlin.jvm.JvmName("-initializeeventPublishResponse")
inline fun eventPublishResponse(block: io.nitric.proto.event.v1.EventPublishResponseKt.Dsl.() -> kotlin.Unit): io.nitric.proto.event.v1.EventPublishResponse =
  io.nitric.proto.event.v1.EventPublishResponseKt.Dsl._create(io.nitric.proto.event.v1.EventPublishResponse.newBuilder()).apply { block() }._build()
object EventPublishResponseKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: io.nitric.proto.event.v1.EventPublishResponse.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.nitric.proto.event.v1.EventPublishResponse.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.nitric.proto.event.v1.EventPublishResponse = _builder.build()

    /**
     * <pre>
     * The id of the published message
     * When an id was not supplied
     * one should be automatically generated
     * </pre>
     *
     * <code>string id = 1;</code>
     */
    var id: kotlin.String
      @JvmName("getId")
      get() = _builder.getId()
      @JvmName("setId")
      set(value) {
        _builder.setId(value)
      }
    /**
     * <pre>
     * The id of the published message
     * When an id was not supplied
     * one should be automatically generated
     * </pre>
     *
     * <code>string id = 1;</code>
     */
    fun clearId() {
      _builder.clearId()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun io.nitric.proto.event.v1.EventPublishResponse.copy(block: io.nitric.proto.event.v1.EventPublishResponseKt.Dsl.() -> kotlin.Unit): io.nitric.proto.event.v1.EventPublishResponse =
  io.nitric.proto.event.v1.EventPublishResponseKt.Dsl._create(this.toBuilder()).apply { block() }._build()

