//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: proto/deploy/v1/deploy.proto

package io.nitric.proto.deploy.v1;

@kotlin.jvm.JvmName("-initializedeployDownEvent")
inline fun deployDownEvent(block: io.nitric.proto.deploy.v1.DeployDownEventKt.Dsl.() -> kotlin.Unit): io.nitric.proto.deploy.v1.DeployDownEvent =
  io.nitric.proto.deploy.v1.DeployDownEventKt.Dsl._create(io.nitric.proto.deploy.v1.DeployDownEvent.newBuilder()).apply { block() }._build()
object DeployDownEventKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: io.nitric.proto.deploy.v1.DeployDownEvent.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.nitric.proto.deploy.v1.DeployDownEvent.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.nitric.proto.deploy.v1.DeployDownEvent = _builder.build()

    /**
     * <code>.nitric.deploy.v1.DeployEventMessage message = 1;</code>
     */
    var message: io.nitric.proto.deploy.v1.DeployEventMessage
      @JvmName("getMessage")
      get() = _builder.getMessage()
      @JvmName("setMessage")
      set(value) {
        _builder.setMessage(value)
      }
    /**
     * <code>.nitric.deploy.v1.DeployEventMessage message = 1;</code>
     */
    fun clearMessage() {
      _builder.clearMessage()
    }
    /**
     * <code>.nitric.deploy.v1.DeployEventMessage message = 1;</code>
     * @return Whether the message field is set.
     */
    fun hasMessage(): kotlin.Boolean {
      return _builder.hasMessage()
    }

    /**
     * <code>.nitric.deploy.v1.DeployDownEventResult result = 2;</code>
     */
    var result: io.nitric.proto.deploy.v1.DeployDownEventResult
      @JvmName("getResult")
      get() = _builder.getResult()
      @JvmName("setResult")
      set(value) {
        _builder.setResult(value)
      }
    /**
     * <code>.nitric.deploy.v1.DeployDownEventResult result = 2;</code>
     */
    fun clearResult() {
      _builder.clearResult()
    }
    /**
     * <code>.nitric.deploy.v1.DeployDownEventResult result = 2;</code>
     * @return Whether the result field is set.
     */
    fun hasResult(): kotlin.Boolean {
      return _builder.hasResult()
    }
    val contentCase: io.nitric.proto.deploy.v1.DeployDownEvent.ContentCase
      @JvmName("getContentCase")
      get() = _builder.getContentCase()

    fun clearContent() {
      _builder.clearContent()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun io.nitric.proto.deploy.v1.DeployDownEvent.copy(block: io.nitric.proto.deploy.v1.DeployDownEventKt.Dsl.() -> kotlin.Unit): io.nitric.proto.deploy.v1.DeployDownEvent =
  io.nitric.proto.deploy.v1.DeployDownEventKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val io.nitric.proto.deploy.v1.DeployDownEventOrBuilder.messageOrNull: io.nitric.proto.deploy.v1.DeployEventMessage?
  get() = if (hasMessage()) getMessage() else null

val io.nitric.proto.deploy.v1.DeployDownEventOrBuilder.resultOrNull: io.nitric.proto.deploy.v1.DeployDownEventResult?
  get() = if (hasResult()) getResult() else null

