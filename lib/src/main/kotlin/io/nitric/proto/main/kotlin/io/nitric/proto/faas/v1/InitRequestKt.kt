//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: proto/faas/v1/faas.proto

package io.nitric.proto.faas.v1;

@kotlin.jvm.JvmName("-initializeinitRequest")
inline fun initRequest(block: io.nitric.proto.faas.v1.InitRequestKt.Dsl.() -> kotlin.Unit): io.nitric.proto.faas.v1.InitRequest =
  io.nitric.proto.faas.v1.InitRequestKt.Dsl._create(io.nitric.proto.faas.v1.InitRequest.newBuilder()).apply { block() }._build()
object InitRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: io.nitric.proto.faas.v1.InitRequest.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.nitric.proto.faas.v1.InitRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.nitric.proto.faas.v1.InitRequest = _builder.build()

    /**
     * <code>.nitric.faas.v1.ApiWorker api = 10;</code>
     */
    var api: io.nitric.proto.faas.v1.ApiWorker
      @JvmName("getApi")
      get() = _builder.getApi()
      @JvmName("setApi")
      set(value) {
        _builder.setApi(value)
      }
    /**
     * <code>.nitric.faas.v1.ApiWorker api = 10;</code>
     */
    fun clearApi() {
      _builder.clearApi()
    }
    /**
     * <code>.nitric.faas.v1.ApiWorker api = 10;</code>
     * @return Whether the api field is set.
     */
    fun hasApi(): kotlin.Boolean {
      return _builder.hasApi()
    }

    /**
     * <code>.nitric.faas.v1.SubscriptionWorker subscription = 11;</code>
     */
    var subscription: io.nitric.proto.faas.v1.SubscriptionWorker
      @JvmName("getSubscription")
      get() = _builder.getSubscription()
      @JvmName("setSubscription")
      set(value) {
        _builder.setSubscription(value)
      }
    /**
     * <code>.nitric.faas.v1.SubscriptionWorker subscription = 11;</code>
     */
    fun clearSubscription() {
      _builder.clearSubscription()
    }
    /**
     * <code>.nitric.faas.v1.SubscriptionWorker subscription = 11;</code>
     * @return Whether the subscription field is set.
     */
    fun hasSubscription(): kotlin.Boolean {
      return _builder.hasSubscription()
    }

    /**
     * <code>.nitric.faas.v1.ScheduleWorker schedule = 12;</code>
     */
    var schedule: io.nitric.proto.faas.v1.ScheduleWorker
      @JvmName("getSchedule")
      get() = _builder.getSchedule()
      @JvmName("setSchedule")
      set(value) {
        _builder.setSchedule(value)
      }
    /**
     * <code>.nitric.faas.v1.ScheduleWorker schedule = 12;</code>
     */
    fun clearSchedule() {
      _builder.clearSchedule()
    }
    /**
     * <code>.nitric.faas.v1.ScheduleWorker schedule = 12;</code>
     * @return Whether the schedule field is set.
     */
    fun hasSchedule(): kotlin.Boolean {
      return _builder.hasSchedule()
    }
    val workerCase: io.nitric.proto.faas.v1.InitRequest.WorkerCase
      @JvmName("getWorkerCase")
      get() = _builder.getWorkerCase()

    fun clearWorker() {
      _builder.clearWorker()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun io.nitric.proto.faas.v1.InitRequest.copy(block: io.nitric.proto.faas.v1.InitRequestKt.Dsl.() -> kotlin.Unit): io.nitric.proto.faas.v1.InitRequest =
  io.nitric.proto.faas.v1.InitRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val io.nitric.proto.faas.v1.InitRequestOrBuilder.apiOrNull: io.nitric.proto.faas.v1.ApiWorker?
  get() = if (hasApi()) getApi() else null

val io.nitric.proto.faas.v1.InitRequestOrBuilder.subscriptionOrNull: io.nitric.proto.faas.v1.SubscriptionWorker?
  get() = if (hasSubscription()) getSubscription() else null

val io.nitric.proto.faas.v1.InitRequestOrBuilder.scheduleOrNull: io.nitric.proto.faas.v1.ScheduleWorker?
  get() = if (hasSchedule()) getSchedule() else null

