//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: proto/faas/v1/faas.proto

package io.nitric.proto.faas.v1;

@kotlin.jvm.JvmName("-initializehttpTriggerContext")
inline fun httpTriggerContext(block: io.nitric.proto.faas.v1.HttpTriggerContextKt.Dsl.() -> kotlin.Unit): io.nitric.proto.faas.v1.HttpTriggerContext =
  io.nitric.proto.faas.v1.HttpTriggerContextKt.Dsl._create(io.nitric.proto.faas.v1.HttpTriggerContext.newBuilder()).apply { block() }._build()
object HttpTriggerContextKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: io.nitric.proto.faas.v1.HttpTriggerContext.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.nitric.proto.faas.v1.HttpTriggerContext.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.nitric.proto.faas.v1.HttpTriggerContext = _builder.build()

    /**
     * <pre>
     * The request method
     * </pre>
     *
     * <code>string method = 1;</code>
     */
    var method: kotlin.String
      @JvmName("getMethod")
      get() = _builder.getMethod()
      @JvmName("setMethod")
      set(value) {
        _builder.setMethod(value)
      }
    /**
     * <pre>
     * The request method
     * </pre>
     *
     * <code>string method = 1;</code>
     */
    fun clearMethod() {
      _builder.clearMethod()
    }

    /**
     * <pre>
     * The path of the request
     * </pre>
     *
     * <code>string path = 2;</code>
     */
    var path: kotlin.String
      @JvmName("getPath")
      get() = _builder.getPath()
      @JvmName("setPath")
      set(value) {
        _builder.setPath(value)
      }
    /**
     * <pre>
     * The path of the request
     * </pre>
     *
     * <code>string path = 2;</code>
     */
    fun clearPath() {
      _builder.clearPath()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class HeadersOldProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * The old request headers (preserving for backwards compatibility)
     * TODO: Remove in 1.0
     * </pre>
     *
     * <code>map&lt;string, string&gt; headers_old = 3 [deprecated = true];</code>
     */
    @kotlin.Deprecated(message = "Field headersOld is deprecated")  val headersOld: com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, HeadersOldProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getHeadersOldMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getHeadersOldMap()
      )
    /**
     * <pre>
     * The old request headers (preserving for backwards compatibility)
     * TODO: Remove in 1.0
     * </pre>
     *
     * <code>map&lt;string, string&gt; headers_old = 3 [deprecated = true];</code>
     */
    @JvmName("putHeadersOld")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, HeadersOldProxy>
      .put(key: kotlin.String, value: kotlin.String) {
         _builder.putHeadersOld(key, value)
       }
    /**
     * <pre>
     * The old request headers (preserving for backwards compatibility)
     * TODO: Remove in 1.0
     * </pre>
     *
     * <code>map&lt;string, string&gt; headers_old = 3 [deprecated = true];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setHeadersOld")
    @Suppress("NOTHING_TO_INLINE")
    inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, HeadersOldProxy>
      .set(key: kotlin.String, value: kotlin.String) {
         put(key, value)
       }
    /**
     * <pre>
     * The old request headers (preserving for backwards compatibility)
     * TODO: Remove in 1.0
     * </pre>
     *
     * <code>map&lt;string, string&gt; headers_old = 3 [deprecated = true];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeHeadersOld")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, HeadersOldProxy>
      .remove(key: kotlin.String) {
         _builder.removeHeadersOld(key)
       }
    /**
     * <pre>
     * The old request headers (preserving for backwards compatibility)
     * TODO: Remove in 1.0
     * </pre>
     *
     * <code>map&lt;string, string&gt; headers_old = 3 [deprecated = true];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllHeadersOld")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, HeadersOldProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, kotlin.String>) {
         _builder.putAllHeadersOld(map)
       }
    /**
     * <pre>
     * The old request headers (preserving for backwards compatibility)
     * TODO: Remove in 1.0
     * </pre>
     *
     * <code>map&lt;string, string&gt; headers_old = 3 [deprecated = true];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearHeadersOld")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, HeadersOldProxy>
      .clear() {
         _builder.clearHeadersOld()
       }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class QueryParamsOldProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * The old query params (preserving for backwards compatibility)
     * TODO: Remove in 1.0
     * </pre>
     *
     * <code>map&lt;string, string&gt; query_params_old = 4 [deprecated = true];</code>
     */
    @kotlin.Deprecated(message = "Field queryParamsOld is deprecated")  val queryParamsOld: com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, QueryParamsOldProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getQueryParamsOldMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getQueryParamsOldMap()
      )
    /**
     * <pre>
     * The old query params (preserving for backwards compatibility)
     * TODO: Remove in 1.0
     * </pre>
     *
     * <code>map&lt;string, string&gt; query_params_old = 4 [deprecated = true];</code>
     */
    @JvmName("putQueryParamsOld")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, QueryParamsOldProxy>
      .put(key: kotlin.String, value: kotlin.String) {
         _builder.putQueryParamsOld(key, value)
       }
    /**
     * <pre>
     * The old query params (preserving for backwards compatibility)
     * TODO: Remove in 1.0
     * </pre>
     *
     * <code>map&lt;string, string&gt; query_params_old = 4 [deprecated = true];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setQueryParamsOld")
    @Suppress("NOTHING_TO_INLINE")
    inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, QueryParamsOldProxy>
      .set(key: kotlin.String, value: kotlin.String) {
         put(key, value)
       }
    /**
     * <pre>
     * The old query params (preserving for backwards compatibility)
     * TODO: Remove in 1.0
     * </pre>
     *
     * <code>map&lt;string, string&gt; query_params_old = 4 [deprecated = true];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeQueryParamsOld")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, QueryParamsOldProxy>
      .remove(key: kotlin.String) {
         _builder.removeQueryParamsOld(key)
       }
    /**
     * <pre>
     * The old query params (preserving for backwards compatibility)
     * TODO: Remove in 1.0
     * </pre>
     *
     * <code>map&lt;string, string&gt; query_params_old = 4 [deprecated = true];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllQueryParamsOld")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, QueryParamsOldProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, kotlin.String>) {
         _builder.putAllQueryParamsOld(map)
       }
    /**
     * <pre>
     * The old query params (preserving for backwards compatibility)
     * TODO: Remove in 1.0
     * </pre>
     *
     * <code>map&lt;string, string&gt; query_params_old = 4 [deprecated = true];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearQueryParamsOld")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, QueryParamsOldProxy>
      .clear() {
         _builder.clearQueryParamsOld()
       }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class HeadersProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * HTTP request headers
     * </pre>
     *
     * <code>map&lt;string, .nitric.faas.v1.HeaderValue&gt; headers = 5;</code>
     */
     val headers: com.google.protobuf.kotlin.DslMap<kotlin.String, io.nitric.proto.faas.v1.HeaderValue, HeadersProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getHeadersMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getHeadersMap()
      )
    /**
     * <pre>
     * HTTP request headers
     * </pre>
     *
     * <code>map&lt;string, .nitric.faas.v1.HeaderValue&gt; headers = 5;</code>
     */
    @JvmName("putHeaders")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, io.nitric.proto.faas.v1.HeaderValue, HeadersProxy>
      .put(key: kotlin.String, value: io.nitric.proto.faas.v1.HeaderValue) {
         _builder.putHeaders(key, value)
       }
    /**
     * <pre>
     * HTTP request headers
     * </pre>
     *
     * <code>map&lt;string, .nitric.faas.v1.HeaderValue&gt; headers = 5;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setHeaders")
    @Suppress("NOTHING_TO_INLINE")
    inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, io.nitric.proto.faas.v1.HeaderValue, HeadersProxy>
      .set(key: kotlin.String, value: io.nitric.proto.faas.v1.HeaderValue) {
         put(key, value)
       }
    /**
     * <pre>
     * HTTP request headers
     * </pre>
     *
     * <code>map&lt;string, .nitric.faas.v1.HeaderValue&gt; headers = 5;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeHeaders")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, io.nitric.proto.faas.v1.HeaderValue, HeadersProxy>
      .remove(key: kotlin.String) {
         _builder.removeHeaders(key)
       }
    /**
     * <pre>
     * HTTP request headers
     * </pre>
     *
     * <code>map&lt;string, .nitric.faas.v1.HeaderValue&gt; headers = 5;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllHeaders")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, io.nitric.proto.faas.v1.HeaderValue, HeadersProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, io.nitric.proto.faas.v1.HeaderValue>) {
         _builder.putAllHeaders(map)
       }
    /**
     * <pre>
     * HTTP request headers
     * </pre>
     *
     * <code>map&lt;string, .nitric.faas.v1.HeaderValue&gt; headers = 5;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearHeaders")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, io.nitric.proto.faas.v1.HeaderValue, HeadersProxy>
      .clear() {
         _builder.clearHeaders()
       }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class QueryParamsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * HTTP Query params
     * </pre>
     *
     * <code>map&lt;string, .nitric.faas.v1.QueryValue&gt; query_params = 6;</code>
     */
     val queryParams: com.google.protobuf.kotlin.DslMap<kotlin.String, io.nitric.proto.faas.v1.QueryValue, QueryParamsProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getQueryParamsMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getQueryParamsMap()
      )
    /**
     * <pre>
     * HTTP Query params
     * </pre>
     *
     * <code>map&lt;string, .nitric.faas.v1.QueryValue&gt; query_params = 6;</code>
     */
    @JvmName("putQueryParams")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, io.nitric.proto.faas.v1.QueryValue, QueryParamsProxy>
      .put(key: kotlin.String, value: io.nitric.proto.faas.v1.QueryValue) {
         _builder.putQueryParams(key, value)
       }
    /**
     * <pre>
     * HTTP Query params
     * </pre>
     *
     * <code>map&lt;string, .nitric.faas.v1.QueryValue&gt; query_params = 6;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setQueryParams")
    @Suppress("NOTHING_TO_INLINE")
    inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, io.nitric.proto.faas.v1.QueryValue, QueryParamsProxy>
      .set(key: kotlin.String, value: io.nitric.proto.faas.v1.QueryValue) {
         put(key, value)
       }
    /**
     * <pre>
     * HTTP Query params
     * </pre>
     *
     * <code>map&lt;string, .nitric.faas.v1.QueryValue&gt; query_params = 6;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeQueryParams")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, io.nitric.proto.faas.v1.QueryValue, QueryParamsProxy>
      .remove(key: kotlin.String) {
         _builder.removeQueryParams(key)
       }
    /**
     * <pre>
     * HTTP Query params
     * </pre>
     *
     * <code>map&lt;string, .nitric.faas.v1.QueryValue&gt; query_params = 6;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllQueryParams")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, io.nitric.proto.faas.v1.QueryValue, QueryParamsProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, io.nitric.proto.faas.v1.QueryValue>) {
         _builder.putAllQueryParams(map)
       }
    /**
     * <pre>
     * HTTP Query params
     * </pre>
     *
     * <code>map&lt;string, .nitric.faas.v1.QueryValue&gt; query_params = 6;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearQueryParams")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, io.nitric.proto.faas.v1.QueryValue, QueryParamsProxy>
      .clear() {
         _builder.clearQueryParams()
       }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class PathParamsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * HTTP Path parameters
     * </pre>
     *
     * <code>map&lt;string, string&gt; path_params = 7;</code>
     */
     val pathParams: com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, PathParamsProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getPathParamsMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getPathParamsMap()
      )
    /**
     * <pre>
     * HTTP Path parameters
     * </pre>
     *
     * <code>map&lt;string, string&gt; path_params = 7;</code>
     */
    @JvmName("putPathParams")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, PathParamsProxy>
      .put(key: kotlin.String, value: kotlin.String) {
         _builder.putPathParams(key, value)
       }
    /**
     * <pre>
     * HTTP Path parameters
     * </pre>
     *
     * <code>map&lt;string, string&gt; path_params = 7;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setPathParams")
    @Suppress("NOTHING_TO_INLINE")
    inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, PathParamsProxy>
      .set(key: kotlin.String, value: kotlin.String) {
         put(key, value)
       }
    /**
     * <pre>
     * HTTP Path parameters
     * </pre>
     *
     * <code>map&lt;string, string&gt; path_params = 7;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removePathParams")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, PathParamsProxy>
      .remove(key: kotlin.String) {
         _builder.removePathParams(key)
       }
    /**
     * <pre>
     * HTTP Path parameters
     * </pre>
     *
     * <code>map&lt;string, string&gt; path_params = 7;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllPathParams")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, PathParamsProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, kotlin.String>) {
         _builder.putAllPathParams(map)
       }
    /**
     * <pre>
     * HTTP Path parameters
     * </pre>
     *
     * <code>map&lt;string, string&gt; path_params = 7;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearPathParams")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, PathParamsProxy>
      .clear() {
         _builder.clearPathParams()
       }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun io.nitric.proto.faas.v1.HttpTriggerContext.copy(block: io.nitric.proto.faas.v1.HttpTriggerContextKt.Dsl.() -> kotlin.Unit): io.nitric.proto.faas.v1.HttpTriggerContext =
  io.nitric.proto.faas.v1.HttpTriggerContextKt.Dsl._create(this.toBuilder()).apply { block() }._build()

