//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: proto/deploy/v1/deploy.proto

package io.nitric.proto.deploy.v1;

@kotlin.jvm.JvmName("-initializewebsocket")
inline fun websocket(block: io.nitric.proto.deploy.v1.WebsocketKt.Dsl.() -> kotlin.Unit): io.nitric.proto.deploy.v1.Websocket =
  io.nitric.proto.deploy.v1.WebsocketKt.Dsl._create(io.nitric.proto.deploy.v1.Websocket.newBuilder()).apply { block() }._build()
object WebsocketKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: io.nitric.proto.deploy.v1.Websocket.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.nitric.proto.deploy.v1.Websocket.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.nitric.proto.deploy.v1.Websocket = _builder.build()

    /**
     * <pre>
     * Target for handling new client connections
     * </pre>
     *
     * <code>.nitric.deploy.v1.WebsocketTarget connect_target = 1;</code>
     */
    var connectTarget: io.nitric.proto.deploy.v1.WebsocketTarget
      @JvmName("getConnectTarget")
      get() = _builder.getConnectTarget()
      @JvmName("setConnectTarget")
      set(value) {
        _builder.setConnectTarget(value)
      }
    /**
     * <pre>
     * Target for handling new client connections
     * </pre>
     *
     * <code>.nitric.deploy.v1.WebsocketTarget connect_target = 1;</code>
     */
    fun clearConnectTarget() {
      _builder.clearConnectTarget()
    }
    /**
     * <pre>
     * Target for handling new client connections
     * </pre>
     *
     * <code>.nitric.deploy.v1.WebsocketTarget connect_target = 1;</code>
     * @return Whether the connectTarget field is set.
     */
    fun hasConnectTarget(): kotlin.Boolean {
      return _builder.hasConnectTarget()
    }

    /**
     * <pre>
     * Target for handling client disconnections
     * </pre>
     *
     * <code>.nitric.deploy.v1.WebsocketTarget disconnect_target = 2;</code>
     */
    var disconnectTarget: io.nitric.proto.deploy.v1.WebsocketTarget
      @JvmName("getDisconnectTarget")
      get() = _builder.getDisconnectTarget()
      @JvmName("setDisconnectTarget")
      set(value) {
        _builder.setDisconnectTarget(value)
      }
    /**
     * <pre>
     * Target for handling client disconnections
     * </pre>
     *
     * <code>.nitric.deploy.v1.WebsocketTarget disconnect_target = 2;</code>
     */
    fun clearDisconnectTarget() {
      _builder.clearDisconnectTarget()
    }
    /**
     * <pre>
     * Target for handling client disconnections
     * </pre>
     *
     * <code>.nitric.deploy.v1.WebsocketTarget disconnect_target = 2;</code>
     * @return Whether the disconnectTarget field is set.
     */
    fun hasDisconnectTarget(): kotlin.Boolean {
      return _builder.hasDisconnectTarget()
    }

    /**
     * <pre>
     * Target for handling all other message types
     * </pre>
     *
     * <code>.nitric.deploy.v1.WebsocketTarget message_target = 3;</code>
     */
    var messageTarget: io.nitric.proto.deploy.v1.WebsocketTarget
      @JvmName("getMessageTarget")
      get() = _builder.getMessageTarget()
      @JvmName("setMessageTarget")
      set(value) {
        _builder.setMessageTarget(value)
      }
    /**
     * <pre>
     * Target for handling all other message types
     * </pre>
     *
     * <code>.nitric.deploy.v1.WebsocketTarget message_target = 3;</code>
     */
    fun clearMessageTarget() {
      _builder.clearMessageTarget()
    }
    /**
     * <pre>
     * Target for handling all other message types
     * </pre>
     *
     * <code>.nitric.deploy.v1.WebsocketTarget message_target = 3;</code>
     * @return Whether the messageTarget field is set.
     */
    fun hasMessageTarget(): kotlin.Boolean {
      return _builder.hasMessageTarget()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun io.nitric.proto.deploy.v1.Websocket.copy(block: io.nitric.proto.deploy.v1.WebsocketKt.Dsl.() -> kotlin.Unit): io.nitric.proto.deploy.v1.Websocket =
  io.nitric.proto.deploy.v1.WebsocketKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val io.nitric.proto.deploy.v1.WebsocketOrBuilder.connectTargetOrNull: io.nitric.proto.deploy.v1.WebsocketTarget?
  get() = if (hasConnectTarget()) getConnectTarget() else null

val io.nitric.proto.deploy.v1.WebsocketOrBuilder.disconnectTargetOrNull: io.nitric.proto.deploy.v1.WebsocketTarget?
  get() = if (hasDisconnectTarget()) getDisconnectTarget() else null

val io.nitric.proto.deploy.v1.WebsocketOrBuilder.messageTargetOrNull: io.nitric.proto.deploy.v1.WebsocketTarget?
  get() = if (hasMessageTarget()) getMessageTarget() else null

