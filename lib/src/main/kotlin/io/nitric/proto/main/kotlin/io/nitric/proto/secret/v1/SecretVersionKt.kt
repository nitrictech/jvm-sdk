//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: proto/secret/v1/secret.proto

package io.nitric.proto.secret.v1;

@kotlin.jvm.JvmName("-initializesecretVersion")
inline fun secretVersion(block: io.nitric.proto.secret.v1.SecretVersionKt.Dsl.() -> kotlin.Unit): io.nitric.proto.secret.v1.SecretVersion =
  io.nitric.proto.secret.v1.SecretVersionKt.Dsl._create(io.nitric.proto.secret.v1.SecretVersion.newBuilder()).apply { block() }._build()
object SecretVersionKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: io.nitric.proto.secret.v1.SecretVersion.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.nitric.proto.secret.v1.SecretVersion.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.nitric.proto.secret.v1.SecretVersion = _builder.build()

    /**
     * <pre>
     * Reference to the secret container 
     * </pre>
     *
     * <code>.nitric.secret.v1.Secret secret = 1 [(.validate.rules) = { ... }</code>
     */
    var secret: io.nitric.proto.secret.v1.Secret
      @JvmName("getSecret")
      get() = _builder.getSecret()
      @JvmName("setSecret")
      set(value) {
        _builder.setSecret(value)
      }
    /**
     * <pre>
     * Reference to the secret container 
     * </pre>
     *
     * <code>.nitric.secret.v1.Secret secret = 1 [(.validate.rules) = { ... }</code>
     */
    fun clearSecret() {
      _builder.clearSecret()
    }
    /**
     * <pre>
     * Reference to the secret container 
     * </pre>
     *
     * <code>.nitric.secret.v1.Secret secret = 1 [(.validate.rules) = { ... }</code>
     * @return Whether the secret field is set.
     */
    fun hasSecret(): kotlin.Boolean {
      return _builder.hasSecret()
    }

    /**
     * <pre>
     * The secret version
     * </pre>
     *
     * <code>string version = 2 [(.validate.rules) = { ... }</code>
     */
    var version: kotlin.String
      @JvmName("getVersion")
      get() = _builder.getVersion()
      @JvmName("setVersion")
      set(value) {
        _builder.setVersion(value)
      }
    /**
     * <pre>
     * The secret version
     * </pre>
     *
     * <code>string version = 2 [(.validate.rules) = { ... }</code>
     */
    fun clearVersion() {
      _builder.clearVersion()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun io.nitric.proto.secret.v1.SecretVersion.copy(block: io.nitric.proto.secret.v1.SecretVersionKt.Dsl.() -> kotlin.Unit): io.nitric.proto.secret.v1.SecretVersion =
  io.nitric.proto.secret.v1.SecretVersionKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val io.nitric.proto.secret.v1.SecretVersionOrBuilder.secretOrNull: io.nitric.proto.secret.v1.Secret?
  get() = if (hasSecret()) getSecret() else null

