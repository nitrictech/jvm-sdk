//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: proto/faas/v1/faas.proto

package io.nitric.proto.faas.v1;

@kotlin.jvm.JvmName("-initializewebsocketTriggerContext")
inline fun websocketTriggerContext(block: io.nitric.proto.faas.v1.WebsocketTriggerContextKt.Dsl.() -> kotlin.Unit): io.nitric.proto.faas.v1.WebsocketTriggerContext =
  io.nitric.proto.faas.v1.WebsocketTriggerContextKt.Dsl._create(io.nitric.proto.faas.v1.WebsocketTriggerContext.newBuilder()).apply { block() }._build()
object WebsocketTriggerContextKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: io.nitric.proto.faas.v1.WebsocketTriggerContext.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.nitric.proto.faas.v1.WebsocketTriggerContext.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.nitric.proto.faas.v1.WebsocketTriggerContext = _builder.build()

    /**
     * <pre>
     * The nitric name of the socket that this worker listens on
     * </pre>
     *
     * <code>string socket = 1;</code>
     */
    var socket: kotlin.String
      @JvmName("getSocket")
      get() = _builder.getSocket()
      @JvmName("setSocket")
      set(value) {
        _builder.setSocket(value)
      }
    /**
     * <pre>
     * The nitric name of the socket that this worker listens on
     * </pre>
     *
     * <code>string socket = 1;</code>
     */
    fun clearSocket() {
      _builder.clearSocket()
    }

    /**
     * <pre>
     * The type of websocket event
     * </pre>
     *
     * <code>.nitric.faas.v1.WebsocketEvent event = 2;</code>
     */
     var event: io.nitric.proto.faas.v1.WebsocketEvent
      @JvmName("getEvent")
      get() = _builder.getEvent()
      @JvmName("setEvent")
      set(value) {
        _builder.setEvent(value)
      }
    /**
     * <pre>
     * The type of websocket event
     * </pre>
     *
     * <code>.nitric.faas.v1.WebsocketEvent event = 2;</code>
     */
    fun clearEvent() {
      _builder.clearEvent()
    }

    /**
     * <pre>
     * The connection this trigger came from
     * </pre>
     *
     * <code>string connectionId = 3;</code>
     */
    var connectionId: kotlin.String
      @JvmName("getConnectionId")
      get() = _builder.getConnectionId()
      @JvmName("setConnectionId")
      set(value) {
        _builder.setConnectionId(value)
      }
    /**
     * <pre>
     * The connection this trigger came from
     * </pre>
     *
     * <code>string connectionId = 3;</code>
     */
    fun clearConnectionId() {
      _builder.clearConnectionId()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class QueryParamsProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * The query params available in the connection request
     * </pre>
     *
     * <code>map&lt;string, .nitric.faas.v1.QueryValue&gt; query_params = 6;</code>
     */
     val queryParams: com.google.protobuf.kotlin.DslMap<kotlin.String, io.nitric.proto.faas.v1.QueryValue, QueryParamsProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getQueryParamsMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getQueryParamsMap()
      )
    /**
     * <pre>
     * The query params available in the connection request
     * </pre>
     *
     * <code>map&lt;string, .nitric.faas.v1.QueryValue&gt; query_params = 6;</code>
     */
    @JvmName("putQueryParams")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, io.nitric.proto.faas.v1.QueryValue, QueryParamsProxy>
      .put(key: kotlin.String, value: io.nitric.proto.faas.v1.QueryValue) {
         _builder.putQueryParams(key, value)
       }
    /**
     * <pre>
     * The query params available in the connection request
     * </pre>
     *
     * <code>map&lt;string, .nitric.faas.v1.QueryValue&gt; query_params = 6;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setQueryParams")
    @Suppress("NOTHING_TO_INLINE")
    inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, io.nitric.proto.faas.v1.QueryValue, QueryParamsProxy>
      .set(key: kotlin.String, value: io.nitric.proto.faas.v1.QueryValue) {
         put(key, value)
       }
    /**
     * <pre>
     * The query params available in the connection request
     * </pre>
     *
     * <code>map&lt;string, .nitric.faas.v1.QueryValue&gt; query_params = 6;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeQueryParams")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, io.nitric.proto.faas.v1.QueryValue, QueryParamsProxy>
      .remove(key: kotlin.String) {
         _builder.removeQueryParams(key)
       }
    /**
     * <pre>
     * The query params available in the connection request
     * </pre>
     *
     * <code>map&lt;string, .nitric.faas.v1.QueryValue&gt; query_params = 6;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllQueryParams")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, io.nitric.proto.faas.v1.QueryValue, QueryParamsProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, io.nitric.proto.faas.v1.QueryValue>) {
         _builder.putAllQueryParams(map)
       }
    /**
     * <pre>
     * The query params available in the connection request
     * </pre>
     *
     * <code>map&lt;string, .nitric.faas.v1.QueryValue&gt; query_params = 6;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearQueryParams")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, io.nitric.proto.faas.v1.QueryValue, QueryParamsProxy>
      .clear() {
         _builder.clearQueryParams()
       }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun io.nitric.proto.faas.v1.WebsocketTriggerContext.copy(block: io.nitric.proto.faas.v1.WebsocketTriggerContextKt.Dsl.() -> kotlin.Unit): io.nitric.proto.faas.v1.WebsocketTriggerContext =
  io.nitric.proto.faas.v1.WebsocketTriggerContextKt.Dsl._create(this.toBuilder()).apply { block() }._build()

