//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: proto/queue/v1/queue.proto

package io.nitric.proto.queue.v1;

@kotlin.jvm.JvmName("-initializenitricTask")
inline fun nitricTask(block: io.nitric.proto.queue.v1.NitricTaskKt.Dsl.() -> kotlin.Unit): io.nitric.proto.queue.v1.NitricTask =
  io.nitric.proto.queue.v1.NitricTaskKt.Dsl._create(io.nitric.proto.queue.v1.NitricTask.newBuilder()).apply { block() }._build()
object NitricTaskKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: io.nitric.proto.queue.v1.NitricTask.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.nitric.proto.queue.v1.NitricTask.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.nitric.proto.queue.v1.NitricTask = _builder.build()

    /**
     * <pre>
     * A unique id for the task
     * </pre>
     *
     * <code>string id = 1;</code>
     */
    var id: kotlin.String
      @JvmName("getId")
      get() = _builder.getId()
      @JvmName("setId")
      set(value) {
        _builder.setId(value)
      }
    /**
     * <pre>
     * A unique id for the task
     * </pre>
     *
     * <code>string id = 1;</code>
     */
    fun clearId() {
      _builder.clearId()
    }

    /**
     * <pre>
     * The lease id unique to the pop request, this must be used to complete, extend the lease or release the task.
     * </pre>
     *
     * <code>string lease_id = 2;</code>
     */
    var leaseId: kotlin.String
      @JvmName("getLeaseId")
      get() = _builder.getLeaseId()
      @JvmName("setLeaseId")
      set(value) {
        _builder.setLeaseId(value)
      }
    /**
     * <pre>
     * The lease id unique to the pop request, this must be used to complete, extend the lease or release the task.
     * </pre>
     *
     * <code>string lease_id = 2;</code>
     */
    fun clearLeaseId() {
      _builder.clearLeaseId()
    }

    /**
     * <pre>
     * A content hint for the tasks payload
     * </pre>
     *
     * <code>string payload_type = 3;</code>
     */
    var payloadType: kotlin.String
      @JvmName("getPayloadType")
      get() = _builder.getPayloadType()
      @JvmName("setPayloadType")
      set(value) {
        _builder.setPayloadType(value)
      }
    /**
     * <pre>
     * A content hint for the tasks payload
     * </pre>
     *
     * <code>string payload_type = 3;</code>
     */
    fun clearPayloadType() {
      _builder.clearPayloadType()
    }

    /**
     * <pre>
     * The payload of the task
     * </pre>
     *
     * <code>.google.protobuf.Struct payload = 4;</code>
     */
    var payload: com.google.protobuf.Struct
      @JvmName("getPayload")
      get() = _builder.getPayload()
      @JvmName("setPayload")
      set(value) {
        _builder.setPayload(value)
      }
    /**
     * <pre>
     * The payload of the task
     * </pre>
     *
     * <code>.google.protobuf.Struct payload = 4;</code>
     */
    fun clearPayload() {
      _builder.clearPayload()
    }
    /**
     * <pre>
     * The payload of the task
     * </pre>
     *
     * <code>.google.protobuf.Struct payload = 4;</code>
     * @return Whether the payload field is set.
     */
    fun hasPayload(): kotlin.Boolean {
      return _builder.hasPayload()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun io.nitric.proto.queue.v1.NitricTask.copy(block: io.nitric.proto.queue.v1.NitricTaskKt.Dsl.() -> kotlin.Unit): io.nitric.proto.queue.v1.NitricTask =
  io.nitric.proto.queue.v1.NitricTaskKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val io.nitric.proto.queue.v1.NitricTaskOrBuilder.payloadOrNull: com.google.protobuf.Struct?
  get() = if (hasPayload()) getPayload() else null

