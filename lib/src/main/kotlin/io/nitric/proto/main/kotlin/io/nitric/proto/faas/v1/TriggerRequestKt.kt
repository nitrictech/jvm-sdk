//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: proto/faas/v1/faas.proto

package io.nitric.proto.faas.v1;

@kotlin.jvm.JvmName("-initializetriggerRequest")
inline fun triggerRequest(block: io.nitric.proto.faas.v1.TriggerRequestKt.Dsl.() -> kotlin.Unit): io.nitric.proto.faas.v1.TriggerRequest =
  io.nitric.proto.faas.v1.TriggerRequestKt.Dsl._create(io.nitric.proto.faas.v1.TriggerRequest.newBuilder()).apply { block() }._build()
object TriggerRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: io.nitric.proto.faas.v1.TriggerRequest.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.nitric.proto.faas.v1.TriggerRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.nitric.proto.faas.v1.TriggerRequest = _builder.build()

    /**
     * <pre>
     * The data in the trigger
     * </pre>
     *
     * <code>bytes data = 1;</code>
     */
    var data: com.google.protobuf.ByteString
      @JvmName("getData")
      get() = _builder.getData()
      @JvmName("setData")
      set(value) {
        _builder.setData(value)
      }
    /**
     * <pre>
     * The data in the trigger
     * </pre>
     *
     * <code>bytes data = 1;</code>
     */
    fun clearData() {
      _builder.clearData()
    }

    /**
     * <pre>
     * Should we supply a mime type for the data?
     * Or rely on context?
     * </pre>
     *
     * <code>string mime_type = 2;</code>
     */
    var mimeType: kotlin.String
      @JvmName("getMimeType")
      get() = _builder.getMimeType()
      @JvmName("setMimeType")
      set(value) {
        _builder.setMimeType(value)
      }
    /**
     * <pre>
     * Should we supply a mime type for the data?
     * Or rely on context?
     * </pre>
     *
     * <code>string mime_type = 2;</code>
     */
    fun clearMimeType() {
      _builder.clearMimeType()
    }

    /**
     * <code>.nitric.faas.v1.HttpTriggerContext http = 3;</code>
     */
    var http: io.nitric.proto.faas.v1.HttpTriggerContext
      @JvmName("getHttp")
      get() = _builder.getHttp()
      @JvmName("setHttp")
      set(value) {
        _builder.setHttp(value)
      }
    /**
     * <code>.nitric.faas.v1.HttpTriggerContext http = 3;</code>
     */
    fun clearHttp() {
      _builder.clearHttp()
    }
    /**
     * <code>.nitric.faas.v1.HttpTriggerContext http = 3;</code>
     * @return Whether the http field is set.
     */
    fun hasHttp(): kotlin.Boolean {
      return _builder.hasHttp()
    }

    /**
     * <code>.nitric.faas.v1.TopicTriggerContext topic = 4;</code>
     */
    var topic: io.nitric.proto.faas.v1.TopicTriggerContext
      @JvmName("getTopic")
      get() = _builder.getTopic()
      @JvmName("setTopic")
      set(value) {
        _builder.setTopic(value)
      }
    /**
     * <code>.nitric.faas.v1.TopicTriggerContext topic = 4;</code>
     */
    fun clearTopic() {
      _builder.clearTopic()
    }
    /**
     * <code>.nitric.faas.v1.TopicTriggerContext topic = 4;</code>
     * @return Whether the topic field is set.
     */
    fun hasTopic(): kotlin.Boolean {
      return _builder.hasTopic()
    }
    val contextCase: io.nitric.proto.faas.v1.TriggerRequest.ContextCase
      @JvmName("getContextCase")
      get() = _builder.getContextCase()

    fun clearContext() {
      _builder.clearContext()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun io.nitric.proto.faas.v1.TriggerRequest.copy(block: io.nitric.proto.faas.v1.TriggerRequestKt.Dsl.() -> kotlin.Unit): io.nitric.proto.faas.v1.TriggerRequest =
  io.nitric.proto.faas.v1.TriggerRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val io.nitric.proto.faas.v1.TriggerRequestOrBuilder.httpOrNull: io.nitric.proto.faas.v1.HttpTriggerContext?
  get() = if (hasHttp()) getHttp() else null

val io.nitric.proto.faas.v1.TriggerRequestOrBuilder.topicOrNull: io.nitric.proto.faas.v1.TopicTriggerContext?
  get() = if (hasTopic()) getTopic() else null

