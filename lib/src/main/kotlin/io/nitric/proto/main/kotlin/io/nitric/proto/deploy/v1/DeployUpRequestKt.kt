//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: proto/deploy/v1/deploy.proto

package io.nitric.proto.deploy.v1;

@kotlin.jvm.JvmName("-initializedeployUpRequest")
inline fun deployUpRequest(block: io.nitric.proto.deploy.v1.DeployUpRequestKt.Dsl.() -> kotlin.Unit): io.nitric.proto.deploy.v1.DeployUpRequest =
  io.nitric.proto.deploy.v1.DeployUpRequestKt.Dsl._create(io.nitric.proto.deploy.v1.DeployUpRequest.newBuilder()).apply { block() }._build()
object DeployUpRequestKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: io.nitric.proto.deploy.v1.DeployUpRequest.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.nitric.proto.deploy.v1.DeployUpRequest.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.nitric.proto.deploy.v1.DeployUpRequest = _builder.build()

    /**
     * <pre>
     * The spec to deploy
     * </pre>
     *
     * <code>.nitric.deploy.v1.Spec spec = 1;</code>
     */
    var spec: io.nitric.proto.deploy.v1.Spec
      @JvmName("getSpec")
      get() = _builder.getSpec()
      @JvmName("setSpec")
      set(value) {
        _builder.setSpec(value)
      }
    /**
     * <pre>
     * The spec to deploy
     * </pre>
     *
     * <code>.nitric.deploy.v1.Spec spec = 1;</code>
     */
    fun clearSpec() {
      _builder.clearSpec()
    }
    /**
     * <pre>
     * The spec to deploy
     * </pre>
     *
     * <code>.nitric.deploy.v1.Spec spec = 1;</code>
     * @return Whether the spec field is set.
     */
    fun hasSpec(): kotlin.Boolean {
      return _builder.hasSpec()
    }

    /**
     * <pre>
     * A map of attributes related to the deploy request
     * this allows for adding project identifiers etc.
     * </pre>
     *
     * <code>.google.protobuf.Struct attributes = 2;</code>
     */
    var attributes: com.google.protobuf.Struct
      @JvmName("getAttributes")
      get() = _builder.getAttributes()
      @JvmName("setAttributes")
      set(value) {
        _builder.setAttributes(value)
      }
    /**
     * <pre>
     * A map of attributes related to the deploy request
     * this allows for adding project identifiers etc.
     * </pre>
     *
     * <code>.google.protobuf.Struct attributes = 2;</code>
     */
    fun clearAttributes() {
      _builder.clearAttributes()
    }
    /**
     * <pre>
     * A map of attributes related to the deploy request
     * this allows for adding project identifiers etc.
     * </pre>
     *
     * <code>.google.protobuf.Struct attributes = 2;</code>
     * @return Whether the attributes field is set.
     */
    fun hasAttributes(): kotlin.Boolean {
      return _builder.hasAttributes()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun io.nitric.proto.deploy.v1.DeployUpRequest.copy(block: io.nitric.proto.deploy.v1.DeployUpRequestKt.Dsl.() -> kotlin.Unit): io.nitric.proto.deploy.v1.DeployUpRequest =
  io.nitric.proto.deploy.v1.DeployUpRequestKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val io.nitric.proto.deploy.v1.DeployUpRequestOrBuilder.specOrNull: io.nitric.proto.deploy.v1.Spec?
  get() = if (hasSpec()) getSpec() else null

val io.nitric.proto.deploy.v1.DeployUpRequestOrBuilder.attributesOrNull: com.google.protobuf.Struct?
  get() = if (hasAttributes()) getAttributes() else null

