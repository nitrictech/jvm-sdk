//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: proto/faas/v1/faas.proto

package io.nitric.proto.faas.v1;

@kotlin.jvm.JvmName("-initializehttpResponseContext")
inline fun httpResponseContext(block: io.nitric.proto.faas.v1.HttpResponseContextKt.Dsl.() -> kotlin.Unit): io.nitric.proto.faas.v1.HttpResponseContext =
  io.nitric.proto.faas.v1.HttpResponseContextKt.Dsl._create(io.nitric.proto.faas.v1.HttpResponseContext.newBuilder()).apply { block() }._build()
object HttpResponseContextKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: io.nitric.proto.faas.v1.HttpResponseContext.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.nitric.proto.faas.v1.HttpResponseContext.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.nitric.proto.faas.v1.HttpResponseContext = _builder.build()

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class HeadersOldProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * Old HTTP response headers (deprecated)
     * TODO: Remove in 1.0
     * </pre>
     *
     * <code>map&lt;string, string&gt; headers_old = 1 [deprecated = true];</code>
     */
    @kotlin.Deprecated(message = "Field headersOld is deprecated")  val headersOld: com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, HeadersOldProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getHeadersOldMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getHeadersOldMap()
      )
    /**
     * <pre>
     * Old HTTP response headers (deprecated)
     * TODO: Remove in 1.0
     * </pre>
     *
     * <code>map&lt;string, string&gt; headers_old = 1 [deprecated = true];</code>
     */
    @JvmName("putHeadersOld")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, HeadersOldProxy>
      .put(key: kotlin.String, value: kotlin.String) {
         _builder.putHeadersOld(key, value)
       }
    /**
     * <pre>
     * Old HTTP response headers (deprecated)
     * TODO: Remove in 1.0
     * </pre>
     *
     * <code>map&lt;string, string&gt; headers_old = 1 [deprecated = true];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setHeadersOld")
    @Suppress("NOTHING_TO_INLINE")
    inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, HeadersOldProxy>
      .set(key: kotlin.String, value: kotlin.String) {
         put(key, value)
       }
    /**
     * <pre>
     * Old HTTP response headers (deprecated)
     * TODO: Remove in 1.0
     * </pre>
     *
     * <code>map&lt;string, string&gt; headers_old = 1 [deprecated = true];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeHeadersOld")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, HeadersOldProxy>
      .remove(key: kotlin.String) {
         _builder.removeHeadersOld(key)
       }
    /**
     * <pre>
     * Old HTTP response headers (deprecated)
     * TODO: Remove in 1.0
     * </pre>
     *
     * <code>map&lt;string, string&gt; headers_old = 1 [deprecated = true];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllHeadersOld")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, HeadersOldProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, kotlin.String>) {
         _builder.putAllHeadersOld(map)
       }
    /**
     * <pre>
     * Old HTTP response headers (deprecated)
     * TODO: Remove in 1.0
     * </pre>
     *
     * <code>map&lt;string, string&gt; headers_old = 1 [deprecated = true];</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearHeadersOld")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, kotlin.String, HeadersOldProxy>
      .clear() {
         _builder.clearHeadersOld()
       }

    /**
     * <pre>
     * The HTTP status of the request
     * </pre>
     *
     * <code>int32 status = 2;</code>
     */
    var status: kotlin.Int
      @JvmName("getStatus")
      get() = _builder.getStatus()
      @JvmName("setStatus")
      set(value) {
        _builder.setStatus(value)
      }
    /**
     * <pre>
     * The HTTP status of the request
     * </pre>
     *
     * <code>int32 status = 2;</code>
     */
    fun clearStatus() {
      _builder.clearStatus()
    }

    /**
     * An uninstantiable, behaviorless type to represent the field in
     * generics.
     */
    @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
    class HeadersProxy private constructor() : com.google.protobuf.kotlin.DslProxy()
    /**
     * <pre>
     * HTTP response headers
     * </pre>
     *
     * <code>map&lt;string, .nitric.faas.v1.HeaderValue&gt; headers = 3;</code>
     */
     val headers: com.google.protobuf.kotlin.DslMap<kotlin.String, io.nitric.proto.faas.v1.HeaderValue, HeadersProxy>
      @kotlin.jvm.JvmSynthetic
      @JvmName("getHeadersMap")
      get() = com.google.protobuf.kotlin.DslMap(
        _builder.getHeadersMap()
      )
    /**
     * <pre>
     * HTTP response headers
     * </pre>
     *
     * <code>map&lt;string, .nitric.faas.v1.HeaderValue&gt; headers = 3;</code>
     */
    @JvmName("putHeaders")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, io.nitric.proto.faas.v1.HeaderValue, HeadersProxy>
      .put(key: kotlin.String, value: io.nitric.proto.faas.v1.HeaderValue) {
         _builder.putHeaders(key, value)
       }
    /**
     * <pre>
     * HTTP response headers
     * </pre>
     *
     * <code>map&lt;string, .nitric.faas.v1.HeaderValue&gt; headers = 3;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("setHeaders")
    @Suppress("NOTHING_TO_INLINE")
    inline operator fun com.google.protobuf.kotlin.DslMap<kotlin.String, io.nitric.proto.faas.v1.HeaderValue, HeadersProxy>
      .set(key: kotlin.String, value: io.nitric.proto.faas.v1.HeaderValue) {
         put(key, value)
       }
    /**
     * <pre>
     * HTTP response headers
     * </pre>
     *
     * <code>map&lt;string, .nitric.faas.v1.HeaderValue&gt; headers = 3;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("removeHeaders")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, io.nitric.proto.faas.v1.HeaderValue, HeadersProxy>
      .remove(key: kotlin.String) {
         _builder.removeHeaders(key)
       }
    /**
     * <pre>
     * HTTP response headers
     * </pre>
     *
     * <code>map&lt;string, .nitric.faas.v1.HeaderValue&gt; headers = 3;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("putAllHeaders")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, io.nitric.proto.faas.v1.HeaderValue, HeadersProxy>
      .putAll(map: kotlin.collections.Map<kotlin.String, io.nitric.proto.faas.v1.HeaderValue>) {
         _builder.putAllHeaders(map)
       }
    /**
     * <pre>
     * HTTP response headers
     * </pre>
     *
     * <code>map&lt;string, .nitric.faas.v1.HeaderValue&gt; headers = 3;</code>
     */
    @kotlin.jvm.JvmSynthetic
    @JvmName("clearHeaders")
    fun com.google.protobuf.kotlin.DslMap<kotlin.String, io.nitric.proto.faas.v1.HeaderValue, HeadersProxy>
      .clear() {
         _builder.clearHeaders()
       }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun io.nitric.proto.faas.v1.HttpResponseContext.copy(block: io.nitric.proto.faas.v1.HttpResponseContextKt.Dsl.() -> kotlin.Unit): io.nitric.proto.faas.v1.HttpResponseContext =
  io.nitric.proto.faas.v1.HttpResponseContextKt.Dsl._create(this.toBuilder()).apply { block() }._build()

