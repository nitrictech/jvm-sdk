//Generated by the protocol buffer compiler. DO NOT EDIT!
// source: proto/event/v1/event.proto

package io.nitric.proto.event.v1;

@kotlin.jvm.JvmName("-initializenitricEvent")
inline fun nitricEvent(block: io.nitric.proto.event.v1.NitricEventKt.Dsl.() -> kotlin.Unit): io.nitric.proto.event.v1.NitricEvent =
  io.nitric.proto.event.v1.NitricEventKt.Dsl._create(io.nitric.proto.event.v1.NitricEvent.newBuilder()).apply { block() }._build()
object NitricEventKt {
  @kotlin.OptIn(com.google.protobuf.kotlin.OnlyForUseByGeneratedProtoCode::class)
  @com.google.protobuf.kotlin.ProtoDslMarker
  class Dsl private constructor(
    private val _builder: io.nitric.proto.event.v1.NitricEvent.Builder
  ) {
    companion object {
      @kotlin.jvm.JvmSynthetic
      @kotlin.PublishedApi
      internal fun _create(builder: io.nitric.proto.event.v1.NitricEvent.Builder): Dsl = Dsl(builder)
    }

    @kotlin.jvm.JvmSynthetic
    @kotlin.PublishedApi
    internal fun _build(): io.nitric.proto.event.v1.NitricEvent = _builder.build()

    /**
     * <pre>
     * A Unique ID for the Nitric Event
     * </pre>
     *
     * <code>string id = 1;</code>
     */
    var id: kotlin.String
      @JvmName("getId")
      get() = _builder.getId()
      @JvmName("setId")
      set(value) {
        _builder.setId(value)
      }
    /**
     * <pre>
     * A Unique ID for the Nitric Event
     * </pre>
     *
     * <code>string id = 1;</code>
     */
    fun clearId() {
      _builder.clearId()
    }

    /**
     * <pre>
     * A content hint for the events payload
     * </pre>
     *
     * <code>string payload_type = 2;</code>
     */
    var payloadType: kotlin.String
      @JvmName("getPayloadType")
      get() = _builder.getPayloadType()
      @JvmName("setPayloadType")
      set(value) {
        _builder.setPayloadType(value)
      }
    /**
     * <pre>
     * A content hint for the events payload
     * </pre>
     *
     * <code>string payload_type = 2;</code>
     */
    fun clearPayloadType() {
      _builder.clearPayloadType()
    }

    /**
     * <pre>
     * The payload of the event
     * </pre>
     *
     * <code>.google.protobuf.Struct payload = 3;</code>
     */
    var payload: com.google.protobuf.Struct
      @JvmName("getPayload")
      get() = _builder.getPayload()
      @JvmName("setPayload")
      set(value) {
        _builder.setPayload(value)
      }
    /**
     * <pre>
     * The payload of the event
     * </pre>
     *
     * <code>.google.protobuf.Struct payload = 3;</code>
     */
    fun clearPayload() {
      _builder.clearPayload()
    }
    /**
     * <pre>
     * The payload of the event
     * </pre>
     *
     * <code>.google.protobuf.Struct payload = 3;</code>
     * @return Whether the payload field is set.
     */
    fun hasPayload(): kotlin.Boolean {
      return _builder.hasPayload()
    }
  }
}
@kotlin.jvm.JvmSynthetic
inline fun io.nitric.proto.event.v1.NitricEvent.copy(block: io.nitric.proto.event.v1.NitricEventKt.Dsl.() -> kotlin.Unit): io.nitric.proto.event.v1.NitricEvent =
  io.nitric.proto.event.v1.NitricEventKt.Dsl._create(this.toBuilder()).apply { block() }._build()

val io.nitric.proto.event.v1.NitricEventOrBuilder.payloadOrNull: com.google.protobuf.Struct?
  get() = if (hasPayload()) getPayload() else null

